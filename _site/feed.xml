<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-11-26T21:37:17+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NothingButCloud</title><subtitle>Hydejack is a boutique Jekyll theme for hackers, nerds, and academics, with a focus on personal sites that are meant to impress.
</subtitle><entry><title type="html">Group Writeback in Entra Cloud Sync</title><link href="http://localhost:4000/2024-05-01-GroupWriteBack/" rel="alternate" type="text/html" title="Group Writeback in Entra Cloud Sync" /><published>2024-05-01T10:00:32+02:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/GroupWriteBack</id><content type="html" xml:base="http://localhost:4000/2024-05-01-GroupWriteBack/"><![CDATA[<figure>
  <img src="/MyPics/2024-05-01-GroupWriteBack_Cover.png" style="width:75%" />
</figure>


<p>Warm welcome to my new blog post!</p>

<p>One function that I have missed for a long time in the local Active Directory is the option of using dynamic groups. User accounts have certain characteristics and I automatically fill groups based on these characteristics. How cool is that? Unfortunately, this is not possible on-premises without additional tools. But it is possible in Entra ID and with the option of Group Writeback I can extend the feature to the local AD. With restrictions, ok, but what remains is very powerful.</p>

<p>Microsoft has described the topic in detail here
<a href="https://learn.microsoft.com/en-us/entra/identity/hybrid/cloud-sync/how-to-configure-entra-to-active-directory">MS Learn Article</a>, 
so I won‚Äôt open that can of worms again here. Instead, let‚Äôs take a look at a practical example of how we can map a dynamic group function in AD DS.</p>

<p>The Figure below shows an overview of the workflow.</p>

<figure>
  <img src="/MyPics/2024-05-01-GroupWriteBack_1.png" style="width:75%" />
  <figcaption>Figure 1: Example overview</figcaption>
</figure>

<p>In our example, we have Entra Cloud Sync (Point 1 from pic above) and synchronize certain users to Entra ID. So far so good. Then we create a dynamic group in Entra (Point 2), with a dynamic membership rule based on the attribute ‚ÄúDepartment‚Äù = ‚ÄúHR‚Äù. This ensures that users from HR are in the dynamic group. In our example ‚ÄúSG-DG-HR‚Äù.</p>

<p class="figcaption"><a href="/MyPics/2024-05-01-GroupWriteBack_2.png" target="_blank"><img src="/MyPics/2024-05-01-GroupWriteBack_2.png" alt="Groupwriteback_2" /></a>
Figure 2: Dynamic membership rule</p>

<p>Then we set up Group Writeback in CloudSync ‚Ä¶</p>

<p class="figcaption"><a href="/MyPics/2024-05-01-GroupWriteBack_3.png" target="_blank"><img src="/MyPics/2024-05-01-GroupWriteBack_3.png" alt="Groupwriteback_3" /></a>
Figure 3: Group Writeback Option in Entra Cloud Sync</p>

<p>‚Ä¶ and the group is synchronized as a universal group with the On-Premises Active Directory Domain (Point 3 from the overview picture).</p>

<p class="figcaption"><a href="/MyPics/2024-05-01-GroupWriteBack_4.png" target="_blank"><img src="/MyPics/2024-05-01-GroupWriteBack_4.png" alt="Groupwriteback_4" /></a>
Figure 4: AD DS OU with synchronized Entra Group</p>

<p>This is set with the scoping filter in Cloud Sync</p>

<p class="figcaption"><a href="/MyPics/2024-05-01-GroupWriteBack_5.png" target="_blank"><img src="/MyPics/2024-05-01-GroupWriteBack_5.png" alt="Groupwriteback_5" /></a>
Figure 5: Scoping filter in Cloud Sync to define the Target OU in On-Prem AD</p>

<p>The group name is formed here with a part of the ObjectID. However, this can be adjusted in the attribute mapping</p>

<p class="figcaption"><a href="/MyPics/2024-05-01-GroupWriteBack_6.png" target="_blank"><img src="/MyPics/2024-05-01-GroupWriteBack_6.png" alt="Groupwriteback_6" /></a>
Figure 6: CN setting for local AD Group</p>

<p>That‚Äôs all to implement. Now you can use the group to provide access to local resources</p>

<p>This example is focused on our pecific usecase. More details and more possibilities are explained in the related <a href="https://learn.microsoft.com/en-us/entra/identity/hybrid/cloud-sync/how-to-configure-entra-to-active-directory">Article</a></p>

<p>Let me summarize some important aspects:</p>

<ul>
  <li>
    <p>Until now, the Group WriteBack v2 option was available in Cloud Connect as public preview. This is no longer supported as of 30.06.2024. From now on, the successor described here must be used</p>
  </li>
  <li>
    <p>The users must be in Entra ID. Of course, make sense. Otherwise they cannot be a member in the Cloud Group and in scope of the membership rule</p>
  </li>
  <li>
    <p>Users are never created in the local AD. Cloud-only accounts that are members of the dynamic group, due to their characteristics, are skipped during synchronization and do not appear in the AD Group. The rule could also be extended here and exclude synchronized users as members for example</p>
  </li>
</ul>

<p>Have fun trying it out üòÄ</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2024-05-01-GroupWriteBack/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2024-05-01-GroupWriteBack/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2024-05-01-GroupWriteBack/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name>Klaus Bierschenk</name></author><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2024-05-01-GroupWriteBack_Cover.png" /><media:content medium="image" url="http://localhost:4000/MyPics/2024-05-01-GroupWriteBack_Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setup Azure automation to find unused user and computer accounts (step-by-step guide)</title><link href="http://localhost:4000/2023-08-22-StaledAutomation/" rel="alternate" type="text/html" title="Setup Azure automation to find unused user and computer accounts (step-by-step guide)" /><published>2023-08-22T10:00:32+02:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/StaledAutomation</id><content type="html" xml:base="http://localhost:4000/2023-08-22-StaledAutomation/"><![CDATA[<figure>
  <img src="/MyPics/2023-08-22-StaledAutomation_Cover.png" style="width:75%" />
  <figcaption>Niran Kasri auf Pixabay</figcaption>
</figure>

<p>(<a href="https://nothingbutcloud.net/2023-08-22-StaledAutomation/#overview-english-version">For English text</a>)</p>

<ul id="markdown-toc">
  <li><a href="#√ºberblick" id="markdown-toc-√ºberblick">√úberblick</a></li>
  <li><a href="#das-zertifikat" id="markdown-toc-das-zertifikat">Das Zertifikat</a></li>
  <li><a href="#erstellen-des-automation-konto" id="markdown-toc-erstellen-des-automation-konto">Erstellen des Automation-Konto</a>    <ul>
      <li><a href="#zertifikat-private-key-importieren" id="markdown-toc-zertifikat-private-key-importieren">Zertifikat (private Key) importieren</a></li>
      <li><a href="#module-importieren" id="markdown-toc-module-importieren">Module importieren</a></li>
    </ul>
  </li>
  <li><a href="#erstellen-der-app-registration" id="markdown-toc-erstellen-der-app-registration">Erstellen der App Registration</a>    <ul>
      <li><a href="#zertifikat-public-key-importieren" id="markdown-toc-zertifikat-public-key-importieren">Zertifikat (Public Key) importieren</a></li>
      <li><a href="#graph-permissions-einrichten" id="markdown-toc-graph-permissions-einrichten">Graph Permissions einrichten</a></li>
    </ul>
  </li>
  <li><a href="#erstellen-des-speicherkontos" id="markdown-toc-erstellen-des-speicherkontos">Erstellen des Speicherkontos</a>    <ul>
      <li><a href="#container-dem-speicherkonto-hinzuf√ºgen" id="markdown-toc-container-dem-speicherkonto-hinzuf√ºgen">Container dem Speicherkonto hinzuf√ºgen</a></li>
    </ul>
  </li>
  <li><a href="#powershell-runbook-integrieren" id="markdown-toc-powershell-runbook-integrieren">Powershell Runbook integrieren</a>    <ul>
      <li><a href="#ergebnisse-anzeigen" id="markdown-toc-ergebnisse-anzeigen">Ergebnisse anzeigen</a></li>
    </ul>
  </li>
  <li><a href="#overview-english-version" id="markdown-toc-overview-english-version">Overview (English version)</a></li>
  <li><a href="#the-certificate" id="markdown-toc-the-certificate">The certificate</a></li>
  <li><a href="#create-automation-account" id="markdown-toc-create-automation-account">Create Automation Account</a>    <ul>
      <li><a href="#import-certificate-private-key" id="markdown-toc-import-certificate-private-key">Import certificate (private key)</a></li>
      <li><a href="#import-powershell-modules" id="markdown-toc-import-powershell-modules">Import Powershell Modules</a></li>
    </ul>
  </li>
  <li><a href="#create-app-registration" id="markdown-toc-create-app-registration">Create App registration</a>    <ul>
      <li><a href="#import-certificate-public-key" id="markdown-toc-import-certificate-public-key">Import certificate (public key)</a></li>
      <li><a href="#add-graph-permissions" id="markdown-toc-add-graph-permissions">Add Graph Permissions</a></li>
    </ul>
  </li>
  <li><a href="#create-the-storage-account" id="markdown-toc-create-the-storage-account">Create the Storage Account</a>    <ul>
      <li><a href="#add-the-container-to-the-storage-account" id="markdown-toc-add-the-container-to-the-storage-account">Add the container to the Storage Account</a></li>
    </ul>
  </li>
  <li><a href="#add-runbook" id="markdown-toc-add-runbook">Add Runbook</a>    <ul>
      <li><a href="#show-results" id="markdown-toc-show-results">Show results</a></li>
    </ul>
  </li>
</ul>

<h2 id="√ºberblick">√úberblick</h2>
<p>Du findest in meinem Powershell-Repository (<a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">Link</a>) einige Cmdlets aus dem Microsoft-Graph-Modul. Diese Cmdlets helfen, Benutzer- und Computerobjekte in Microsoft Entra ID zu identifizieren, die l√§ngere Zeit nicht benutzt wurden. Dabei wird auf den Zeitstempel der letzten Nutzung der Objekte zur√ºckgegriffen. Im Repository sind Beispiele und Anregungen enthalten, wie die Cmdlets angewendet werden k√∂nnen. Das kann helfen, manuell Listen zu erstellen und die Ergebnisse in CSV-Dateien oder direkt in XLSX-Dateien abzulegen. Schau gerne in meinen Blog Beitrag f√ºr Details zu diesem Thema (<a href="https://nothingbutcloud.net/2023-03-22-FindStaledObjectsInAAD/">The dilemma with unused objects in Azure AD</a>)</p>

<p>Wenn du die Befehle aus den Beispielen verwenden m√∂chtest, um diese Vorg√§nge automatisiert in Azure zu starten, hast du verschiedene M√∂glichkeiten. Eine Logic App oder ein Automation-Konto bieten sich hierf√ºr an. Im Folgenden findest du eine Schritt-f√ºr-Schritt-Anleitung zur Einrichtung eines Automation-Kontos, mitsamt den notwendigen Skripten und allem, was in Azure dazu geh√∂rt. Einmal Implementiert brauchst du dich dann um nichts mehr k√ºmmern und erh√§ltst regelm√§√üig die Exceldatei mit seit l√§ngerem unbenutzten Objekten.</p>

<p>Grundlage f√ºr den Aufbau des Automation-Kontos ist folgender Artikel von Microsoft:
(<a href="https://learn.microsoft.com/de-de/azure/active-directory/governance/identity-governance-automation">Automatisieren von Microsoft Entra Identity Governance-Aufgaben √ºber Azure Automation und Microsoft Graph</a>)</p>

<p>Wir bauen hier in diesem Beitrag auf das von Microsoft beschriebene Stzenario auf und erg√§nzen das Setup mit den relevanten Technologien, die notwendig sind, damit der Automatismus den Anforderungen f√ºr das Ermitteln ungenutzter Computer- und Benutzerobjekte folgt. Hierf√ºr integrieren wir beispielsweise die Graph-Module, k√ºmmern uns um die relevanten Graph-Berechtigungen und sorgen daf√ºr, dass die Ergebnisse als Excel regelm√§√üig in einem Speicherkonto landen.</p>

<p>Zusammenfassend findest du hier eine Anleitung f√ºr das Setup folgender Technologien:</p>

<ul>
  <li>Implementieren der App Registration</li>
  <li>Erstellen des Zertifikats und hinterlegen in Azure Automation und App Registration</li>
  <li>Ein Speicherkonto</li>
  <li>Automation-Konto</li>
</ul>

<h2 id="das-zertifikat">Das Zertifikat</h2>
<p>Nachfolgende Cmdlets (<a href="https://github.com/KlaBier/Powershell/blob/main/AutomationRunbookLab/SelfSignedCert.ps1">Link</a>) erstellen ein selbstsigniertes Zertifikat. F√ºhre die Befehle auf einem Computer deiner Wahl aus. In meinem Lab hat es mit einem Windows 11 Client bestens funktioniert.</p>

<p>Weitere Informationen zum Erstellen selbstsignierter Zertifikate findest du in folgendem Microsoft Artikel:
(<a href="https://learn.microsoft.com/de-de/azure/active-directory/develop/howto-create-self-signed-certificate">Erstellen Sie ein selbstsigniertes √∂ffentliches Zertifikat zum Authentifizieren Ihrer Anwendung</a></p>

<p><strong>‚ûî Hinweis:</strong>
Selbstsignierte Zertifikate sollten f√ºr den produktiven Einsatz vermieden werden, da sie nicht von einer vertrauensw√ºrdigen Zertifizierungsstelle ausgestellt wurden. Wenn du die M√∂glichkeit hast, ein Zertifikat von einer autorisierten Zertifizierungsstelle zu beziehen, ist dies der empfohlene Weg. Du musst dabei sicherstellen, das neben dem √∂ffentlichen Schl√ºssel der private Schl√ºssel ebenfalls exportiert werden kann, da beides f√ºr den Import in Azure und Microsoft Entra ID ben√∂tigt wird. Im vorliegenden Beispiel halte ich jedoch ein selbstsigniertes Zertifikat f√ºr unbedenklich, da es nur f√ºr die Authentifizierung der App-Registrierung eingesetzt wird, die meiner Meinung nach unkritisch ist.
Alternativ lie√üe sich auch ein Secret f√ºr die Authentifizierung in der App-Registrierung verwenden. Ich pers√∂nlich verzichte jedoch gerne auf Secrets. Sie erfordern den Umgang (kopieren, einf√ºgen, ‚Ä¶) mit dem Secret-Wert, der im Grunde nichts anderes als ein Passwort ist. Wenn du mehr zum Thema Secrets wissen m√∂chtest, schau doch mal in folgendem Blog Beitrag von mir (<a href="https://nothingbutcloud.net/2023-01-07-GetSecretInfos">Check your Azure AD for expiring App Secrets</a>), Secrets haben n√§mlich noch mehr Nachteile.</p>

<p>Wir entscheiden uns also f√ºr das Zertifikat und wenn du es mit den Cmdlets generierst und exportierst sollte dein Bildschirm in etwas wie folgt aussehen:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_1.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_1.png" alt="StaledAutomation_1" /></a>
Erstellen des Zertifikates</p>

<!---
Das geht auch aber die oben benutzte Variate ist besser, da ein eigenes Fenster ge√∂ffnet wird 
<figure>
  <img src="/MyPics/2023-08-22-StaledAutomation_1.png" style="width:100%">
  <figcaption>Erstellen des Zertifikates</figcaption>
</figure>
-->

<h2 id="erstellen-des-automation-konto">Erstellen des Automation-Konto</h2>

<p>Als n√§chstes wird das Automation-Konto erstellt. Im Setup-Prozess m√ºssen folgende Seiten bedient werden.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_2.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_2.png" alt="StaledAutomation_2" /></a>
Basic Seite: w√§hle Subscription und Ressource Gruppe deiner Wahl</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_3.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_3.png" alt="StaledAutomation_3" /></a>
Advanced Seite: keine √Ñnderung</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_4.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_4.png" alt="StaledAutomation_4" /></a>
Netzwerk Seite: keine √Ñnderung</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_5.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_5.png" alt="StaledAutomation_5" /></a>
Seite mit den Tags: keine √Ñnderung</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_6.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_6.png" alt="StaledAutomation_6" /></a>
Abschlussseite und fertig</p>

<h3 id="zertifikat-private-key-importieren">Zertifikat (private Key) importieren</h3>

<p>Nach Erstellung des Automation-Kontos wenden wir uns dem Zertifikat zu, das wir auf dem Windows 11 Client generiert und mit dem dazugeh√∂rigen privaten Schl√ºssel exportiert haben. Wenn du auf einem Client ein selbst signiertes Zertifikat verwendest, beispielsweise um eine zertifikatsbasierte Authentifizierung mit der Powershell zu initialisieren, musst du bez√ºglich des privaten Schl√ºssels nichts tun, da er im lokalen Zertifikatsspeicher des jeweiligen Computers liegt und von dort aus direkt verwendet wird.
Im vorliegenden Beispiel ist dies aber nicht der Fall, da die Authentifizierung vom Automation-Konto ausgeht und nicht von einem Computer. Du musst den zuvor exportierten privaten Schl√ºssel hierzu in Azure importieren.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_7.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_7.png" alt="StaledAutomation_7" /></a>
Import des Zertifikates (privater Schl√ºssel) in Automation</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_8.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_8.png" alt="StaledAutomation_8" /></a>
Nach dem Import des Zertifikates in Automation</p>

<h3 id="module-importieren">Module importieren</h3>

<p>Nach dem Import des Zertifikates geht es in dem Automation-Konto weiter. Hier heisst es die Powershell Module f√ºr das Runbook hinzuzuf√ºgen.</p>

<p>An den bestehenden Standardmodulen √§ndert sich nichts, lediglich die nachfolgend abgebildeten Module sind hinzuzuf√ºgen</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_9.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_9.png" alt="StaledAutomation_9" /></a>
Hinzuzuf√ºgende Module im Automation-Konto</p>

<p>Neben den drei Graph-Modulen ben√∂tigst du f√ºr die Verwendung das Modul ‚ÄúImportExcel‚Äù von Doug Finke (<a href="https://github.com/dfinke/ImportExcel">Link</a>). Alle Module k√∂nnen √ºber Browse Gallery problemlos hinzugef√ºgt werden, wie die folgenden Abbildungen am Beispiel von ‚ÄúImportExcel‚Äù zeigen. Die Vorgehensweise f√ºr die Graph-Module ist analog.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_10.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_10.png" alt="StaledAutomation_10" /></a>
Browse Gallery zum Hinzuf√ºgen weiterer Module, sogenannter Custom Module</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_11.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_11.png" alt="StaledAutomation_11" /></a>
Import des Modules best√§tigen und fertig</p>

<h2 id="erstellen-der-app-registration">Erstellen der App Registration</h2>

<p>Das Automation-Konto ist noch nicht fertig, hier sind unter anderem noch Variablen zu erg√§nzen. Die hierf√ºr notwendigen Inhalte entstammen aus Azure Elementen, die wir bis jetzt noch nicht erstellt haben, die App Registration und auch das Speicherkonto.</p>

<p>Das Anlegen der App Registration ist unspektakul√§r. F√ºge einfach in Microsoft Entra ID unter ‚ÄúApp registrations‚Äù eine ebensolche hinzu und lasse alle Einstellungen beim Standard. F√ºr unser Beispiel sind der √∂ffentlichen Schl√ºssel des Zertifikates und die MS Graph Berechtigungen zus√§tzlich erforderlich. Der Name ist frei. Bei mir im Lab lautet er ‚ÄúAdminAutomationApp‚Äù</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_12.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_12.png" alt="StaledAutomation_12" /></a>
Erstellen einer App Registration mit Standardeinstellungen</p>

<h3 id="zertifikat-public-key-importieren">Zertifikat (Public Key) importieren</h3>

<p>Ist die App Registration erstellt, f√ºgen wir den √∂ffentlichen Schl√ºssel des Zertifikates hinzu, den wir weiter oben (Win11 Client) erstellt und exportiert haben.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_13.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_13.png" alt="StaledAutomation_13" /></a>
‚ÄúUpload certificate‚Äù f√ºgt den √∂ffentlichen Schl√ºssel eines Zertifikates hinzu ‚Ä¶</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_14.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_14.png" alt="StaledAutomation_14" /></a>
‚Ä¶ hierzu die zuvor exportierte CER Datei f√ºr den ‚ÄúUpload‚Äù angeben</p>

<h3 id="graph-permissions-einrichten">Graph Permissions einrichten</h3>

<p>Anschlie√üend noch die MS Graph Berechtigungen anpassen, so dass die Liste mit den Berechtigungen wie folgt aussieht:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_15.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_15.png" alt="StaledAutomation_15" /></a>
Graph Berechtigungen f√ºr die App Registration</p>

<p>Die ‚ÄúApplication ID‚Äù und die ‚ÄúTenant ID‚Äù aus deinem Setup ben√∂tigst du sp√§ter bei den Variablen im Automation-Konto. Kopiere sie am besten in ein Textfile f√ºr sp√§ter.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_16.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_16.png" alt="StaledAutomation_16" /></a>
√úbersichtsseite der erstellten App Registration</p>

<h2 id="erstellen-des-speicherkontos">Erstellen des Speicherkontos</h2>

<p>An dieser Stelle schlie√üen wir die App-Registrierung ab und richten unsere Aufmerksamkeit auf das Speicherkonto, das vom Runbook genutzt wird, um die Excel-Datei mit den unbenutzten Objekten zu speichern.</p>

<p>Ein Speicherkonto ist ein komplexes Objekt, mit vielf√§ltigen Einsatzm√∂glichkeiten. In unserem Setup dient es allein zum Erstellen eines Containers, √§hnlich einem Ordner im Dateisystem, als Ziel f√ºr die Excel-Datei.</p>

<p><strong>‚ûî Hinweis:</strong>
√úbrigens empfiehlt es sich dieselbe Ressourcengruppe wie beim Automation-Konto zu verwenden. Wenn du n√§mlich das Setup nur testen m√∂chtest, reicht es sp√§ter aus, lediglich die Resssourcengruppe zu entfernen um aufzur√§umen. Das gilt jedoch nicht f√ºr die zuvor erstellte App-Registrierung, diese ist unabh√§ngig von einer Subscription und einer Ressourcengruppe, App-Registrierungen befinden sich in Microsoft Entra ID.</p>

<p>Also, weiter geht es mit dem Speicherkonto:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_17.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_17.jpg" alt="StaledAutomation_17" /></a>
Einstiegsseite zum Erstellen des Speicherkontos</p>

<!--
<figure>
  <img src="/MyPics/2023-08-22-StaledAutomation_17.jpg" style="width:100%">
  <figcaption>Figure 3: List with devices exported to Excel</figcaption>
</figure>
-->

<p>Es ist nicht notwendig nachfolgend alle Seiten des Assistenten abzubilden, die f√ºr das Erstellen eines Speicherkontos in Azure ben√∂tigt werden. Die zwei folgenden Screenshots fassen zusammen, welche Optionen und Einstellungen insgesamt hier funktionieren.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_18.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_18.jpg" alt="StaledAutomation_18" /></a>
Zusammenfassung aller Werte vor dem Erstellen des Speicherkontos (Seite1)</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_19.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_19.jpg" alt="StaledAutomation_19" /></a>
Zusammenfassung aller Werte vor dem Erstellen des Speicherkontos (Seite 2)</p>

<p>Nach Erstellung des Kontos sieht die √úbersichtsseite wie folgt aus:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_20.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_20.png" alt="StaledAutomation_20" /></a>
√úbersicht des Speicherkontos</p>

<h3 id="container-dem-speicherkonto-hinzuf√ºgen">Container dem Speicherkonto hinzuf√ºgen</h3>

<p>Als abschlie√üende Ma√ünahme f√ºgst du dem Speicherkonto einen Container hinzu</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_21.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_21.png" alt="StaledAutomation_21" /></a>
Hinzuf√ºgen eines Containers f√ºr das Speicherkonto</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_22.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_22.png" alt="StaledAutomation_22" /></a>
Anzeige der Container im Speicherkonto</p>

<p>Zum Abschluss werfen wir einen Blick auf den Zugriffsschl√ºssel des Speicherkontos. Wir ben√∂tigen den Schl√ºssel f√ºr die Variablen im Automatisierungskonto sowie f√ºr den Zugriff auf das Speicherkonto im Runbook. Kopiere ihn am besten ebenfalls in ein Textfile f√ºr sp√§ter, wenn du die Variablen erg√§nzt.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_23.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_23.png" alt="StaledAutomation_23" /></a>
Zugriffsschl√ºssel f√ºr das Speicherkonto</p>

<p>Zugegeben, das geht definitiv sicherer als hier demonstriert. Zugriffsschl√ºssel sollten an einem sicheren Ort gespeichert (Key Vault) und von Zeit zu Zeit erneuert werden. Ich verzichte in dem Beispiel bewusst darauf.</p>

<p>Wir wechseln zur√ºck zum Automation-Konto in Azure. Wir haben jetzt alles beisammen um die Variablen anzulegen.</p>

<p>F√ºge also folgende Variablen deinem Konto hinzu und achte darauf, dass die Namen der Variablen mit meinen hier abgebildeten √ºbereinstimmen. Denn so werden sie in der Powershell Sequenz f√ºr das Runbook referenziert</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_24.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_24.png" alt="StaledAutomation_24" /></a>
Variablen im Automation-Konto</p>

<h2 id="powershell-runbook-integrieren">Powershell Runbook integrieren</h2>

<p>Jetzt erstellen wir das Herzst√ºck des Automation-Kontos, das Runbook vom ‚ÄúType‚Äù Powershell.
Der Name ist beliebig</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_25.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_25.png" alt="StaledAutomation_25" /></a>
Erstellen des Runbooks in Automation</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_26.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_26.png" alt="StaledAutomation_26" /></a>
Anzeige der Runbooks f√ºr das Automation-Konto</p>

<p>Wenn das Runbook erstellt ist, selektiere es und √∂ffne den Editor ‚Ä¶</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_27.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_27.png" alt="StaledAutomation_27" /></a></p>

<p>‚Ä¶ f√ºge die Powershell Sequenz aus meinem Repository (<a href="https://github.com/KlaBier/Powershell/blob/main/AutomationRunbookLab/RunbookCode.ps1">Link</a>) in den Editor ein</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_28.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_28.png" alt="StaledAutomation_28" /></a>
Der Powershell Editor im Azure Portal</p>

<p>Passe die PowerShell-Elemente an deine Bed√ºrfnisse an oder lasse sie so, wie du sie in meinem Repository vorfindest. Wenn du im PowerShell-Editor fertig bist, ist es ratsam, mittels ‚ÄúTest Pane‚Äù (1) einen Test durchzuf√ºhren. Erst danach kannst du das Runbook ver√∂ffentlichen (2). Solange das Runbook im Automation-Konto nicht ver√∂ffentlicht wurde, kannst du keinen entsprechenden Zeitplan einrichten.
Wenn alle ben√∂tigten Variablen vorhanden sind und die App-Registrierung sowie das Speicherkonto gem√§√ü den Anweisungen erstellt wurden, sollte der Bildschirm nach einem Testlauf ungef√§hr wie folgt aussehen:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_29.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_29.png" alt="StaledAutomation_29" /></a>
Testen des Powershell Runbooks</p>

<p>Bei Unstimmigkeiten sind die Fehlermeldungen in der Regel selbsterkl√§rend. Eine Fehleranalyse sollte keine allzu gro√üe H√ºrde darstellen, da es sich hierbei wohl um Tippfehler oder √§hnliches handelt.
Das Bildschirmprotokoll ist l√§nger als hier sichtbar. Fehlermeldungen k√∂nnen au√üerhalb des Fensterinhalts liegen. Du kannst im Ausgabebereich nach oben scrollen und nachsehen, ob irgendwo ein Fehler protokolliert wurde. 
Es kann irref√ºhrend sein, dass immer ‚ÄúCompleted‚Äù in gr√ºn angezeigt wird, auch wenn au√üerhalb des Ausgabefensters Hinweise auf einen Fehler deuten und somit der ‚ÄúStatus‚Äù keineswegs gr√ºn ist.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_30.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_30.png" alt="StaledAutomation_30" /></a>
Fehler beim Testen des Powershell Runbooks</p>

<h3 id="ergebnisse-anzeigen">Ergebnisse anzeigen</h3>

<p>Wenn schlie√ülich alles passt sollte in dem Container des Speicherkontos das gew√ºnschte Excelfile liegen.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_31.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_31.png" alt="StaledAutomation_31" /></a>
Speicherkonto mit der Exceldatei</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_32.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_32.png" alt="StaledAutomation_32" /></a>
Liste mit unbenutzten Benutzerkonten</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_33.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_33.png" alt="StaledAutomation_33" /></a>
Liste mit unbenutzten Computerkonten</p>

<p>Zuletzt musst du noch ein Schedule hinzuf√ºgen und dem Runbook zuordnen. Dieser Schritt ist weitestgehend selbsterkl√§rend.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_34.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_34.png" alt="StaledAutomation_34" /></a>
Schedule f√ºr die Zeitplanung des Runbook</p>

<p>Besonders leistungsstark und erw√§hnenswert finde ich hier die M√∂glichkeit mehrere Zeitplanungen in einem Automation-Konto vorzuhalten um hier maximale Flexibilit√§t in der Ausf√ºhrung zu gestatten.</p>

<p>Wie auch immer das Runbook ausgef√ºhrt wird, es spielt keine Rolle ob manuell, wie oben beim Test beschrieben, oder √ºber einen Zeitplan. Du erh√§ltst nach jeder Ausf√ºhrung eine Exceldatei mit dem Zeitstempel der Ausf√ºhrung im Dateinamen.</p>

<p>Das Runbook sieht im Automation-Konto abschlie√üend wir folgt aus:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_35.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_35.png" alt="StaledAutomation_35" /></a>
√úbersichtsseite des fertiggestellten Runbooks</p>

<p><strong>‚ûî Zusammenfassung:</strong>
Ein Automation-Konto bietet zahlreiche Gestaltungsm√∂glichkeiten. Mein Beispiel zeigt einige der vielf√§ltigen Optionen die Automation bietet. Grenzen sind hier die Fantasie des Administrators.</p>

<p>Warum nicht ein neues Runbook im Automation-Konto erstellen, das die Excel-Datei auswertet und Computerkonten direkt deaktiviert oder halbj√§hrlich l√∂scht? √úber ein Flag beispielsweise. √Ñhnliches l√§sst sich auch mit Benutzerkonten verwirklichen.</p>

<p>Ich w√ºnsche dir viel Erfolg im administrativen Umgang mit unbenutzten Identit√§ten und mit dem hier beschriebenen Setup.</p>

<p>Kontaktiere mich gerne f√ºr einen Austausch oder wenn du Feedback hast</p>

<p>Zu guter Letzt sei dir noch folgender Microsoft Artikel empfohlen:</p>

<p>(<a href="https://learn.microsoft.com/de-de/azure/automation/automation-runbook-execution">Ausf√ºhren von Runbooks in Azure Automation</a>)</p>

<h2 id="overview-english-version">Overview (English version)</h2>
<p>You can find some cmdlets from the Microsoft Graph module in my Powershell repository (<a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">link</a>). These cmdlets help to identify user and computer objects in Microsoft Entra ID that have not been used for a long time. This is done by reverting to the timestamp of the last time the objects were used. The repository contains examples and suggestions on how to apply the cmdlets. This can help to manually create lists and store the results in CSV files or directly in XLSX files. Feel free to check out my blog post for details on this topic (<a href="https://nothingbutcloud.net/2023-03-22-FindStaledObjectsInAAD/">The dilemma with unused objects in Azure AD</a>).</p>

<p>If you want to use the commands from the examples to run these operations automatically in Azure, you have several options. A Logic App or an Automation Account are good options. Below are step-by-step instructions on how to set up an Automation Account, including the necessary scripts and everything that goes with it in Azure. Once implemented, you won‚Äôt have to worry about anything and will regularly receive the Excel file with objects that have been unused for a while.</p>

<p>The basis for setting up the Automation Account is the following article from Microsoft:
(<a href="https://learn.microsoft.com/en-us/azure/active-directory/governance/identity-governance-automation">Automate Microsoft Entra Identity Governance tasks via Azure Automation and Microsoft Graph</a>)</p>

<p>Here in this post, we build on the scenario described by Microsoft and supplement the setup with the relevant technologies that are necessary for the automatism to follow the requirements for determining unused computer and user objects. For example, we integrate the graph modules, take care of the relevant graph permissions and make sure that the results load as Excel regularly in a Storage Account.</p>

<p>In summary, here is a Lab guide to setting up the following technologies:</p>

<ul>
  <li>Implement the App Registration</li>
  <li>Create the certificate and store it in Azure Automation and App Registration.</li>
  <li>Storage Account</li>
  <li>Automation Account</li>
</ul>

<h2 id="the-certificate">The certificate</h2>
<p>The following cmdlets (<a href="https://github.com/KlaBier/Powershell/blob/main/AutomationRunbookLab/SelfSignedCert.ps1">Link</a>) create a self-signed certificate. Run the commands on a computer of your choice. In my lab it worked fine with a Windows 11 client.</p>

<p>For more information about creating self-signed certificates, see the following Microsoft article:
(<a href="https://learn.microsoft.com/en-us/azure/active-directory/develop/howto-create-self-signed-certificate">Create a self-signed public certificate to authenticate your application</a></p>

<p><strong>‚ûî Note:</strong>
Self-signed certificates should be avoided for productive use because they are not issued by a trusted certificate authority. If you have the possibility to obtain a certificate from an authorized certification authority, this is the recommended way. You have to make sure that besides the public key the private key can be exported as well, since both are needed for the import into Azure and Microsoft Entra ID. In this example, however, I consider a self-signed certificate to be harmless, since it is only used for the authentication of the app registration, which is not critical in my opinion.
Alternatively, a secret could also be used for authentication in the app registry. However, I personally like to do without Secrets. They require handling (copy, paste, ‚Ä¶) the Secret value, which is a kind of a password. If you want to know more about Secrets, have a look at the following blog post of mine (<a href="https://nothingbutcloud.net/2023-01-07-GetSecretInfos">Check your Azure AD for expiring App Secrets</a>), because Secrets have even more disadvantages.</p>

<p>So we decide to use the certificate and when you generate and export it with the cmdlets your screen should look something like this:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_1.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_1.png" alt="StaledAutomation_1" /></a>
Create self-signed certificate</p>

<h2 id="create-automation-account">Create Automation Account</h2>

<p>Now we create the Automation account. The next figures show the values and parameters to be entered.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_2.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_2.png" alt="StaledAutomation_2" /></a>
Basic Page: select Subscription and Ressource Group</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_3.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_3.png" alt="StaledAutomation_3" /></a>
Advanced Page: nothing is changed</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_4.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_4.png" alt="StaledAutomation_4" /></a>
Netzwork Page: nothing is changed</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_5.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_5.png" alt="StaledAutomation_5" /></a>
Tags Page: nothing is changed</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_6.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_6.png" alt="StaledAutomation_6" /></a>
Summary page and done</p>

<h3 id="import-certificate-private-key">Import certificate (private key)</h3>

<p>After creating the Automation account, we turn to the certificate that we generated on the Windows 11 client and exported with the associated private key. If you use a self-signed certificate on a client, for example to initialize certificate-based authentication with Powershell, you don‚Äôt have to do anything regarding the private key, because it resides in the local certificate store of the respective computer and is used directly from there.
In this example, however, this is not the case because the authentication originates from the Automation account and not from a computer. You need to import the previously exported private key into Azure for this.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_7.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_7.png" alt="StaledAutomation_7" /></a>
Import the private certificate key to Automation</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_8.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_8.png" alt="StaledAutomation_8" /></a>
After certificate import in Automation</p>

<h3 id="import-powershell-modules">Import Powershell Modules</h3>

<p>After importing the certificate, we continue in the Automation Account. Here you have to add the Powershell modules for the runbook.</p>

<p>Nothing changes in the existing standard modules, only the modules shown below have to be added</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_9.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_9.png" alt="StaledAutomation_9" /></a>
Required modules in the Automation Account</p>

<p>Besides the three graph modules you need the module ‚ÄúImportExcel‚Äù by Doug Finke (<a href="https://github.com/dfinke/ImportExcel">Link</a>). All modules can be added easily via Browse Gallery, as shown in the following figures using the example of ‚ÄúImportExcel‚Äù. The procedure for the Graph modules is analogous.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_10.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_10.png" alt="StaledAutomation_10" /></a>
Browse Gallery to add Custum Modules</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_11.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_11.png" alt="StaledAutomation_11" /></a>
Import Powershell Modules</p>

<h2 id="create-app-registration">Create App registration</h2>

<p>The Automation Account is not yet finished, among other things, variables still need to be added here. The content required for this comes from Azure elements that we have not yet created, the app registration and also the Storage Account.</p>

<p>The creation of the App Registration is unspectacular. Just add one in Microsoft Entra ID under ‚ÄúApp registrations‚Äù and leave all settings at default. For our example the public key of the certificate and the MS Graph permissions are additionally required. The name is free. In my lab it is ‚ÄúAdminAutomationApp‚Äù.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_12.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_12.png" alt="StaledAutomation_12" /></a>
Create App registration with default settings</p>

<h3 id="import-certificate-public-key">Import certificate (public key)</h3>

<p>Once the app registration is created, we add the public key of the certificate we created and exported above (Win11 Client).</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_13.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_13.png" alt="StaledAutomation_13" /></a>
‚ÄúUpload certificate‚Äù adds the public key of a certificate ‚Ä¶</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_14.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_14.png" alt="StaledAutomation_14" /></a>
‚Ä¶ to do this, specify the previously exported CER file for the ‚Äúupload</p>

<h3 id="add-graph-permissions">Add Graph Permissions</h3>

<p>Then adjust the MS Graph permissions so that the list of permissions looks like this:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_15.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_15.png" alt="StaledAutomation_15" /></a>
App registration Graph Permissions</p>

<p>You will need the ‚ÄúApplication ID‚Äù and the ‚ÄúTenant ID‚Äù later for the variable values in the automation account. It is best to copy them into a text file.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_16.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_16.png" alt="StaledAutomation_16" /></a>
App registration Overview Page</p>

<h2 id="create-the-storage-account">Create the Storage Account</h2>

<p>At this point  the App registration setup is complete and we turn our attention to the Storage Account, which is used by the Runbook, to store the Excel file with the unused objects.</p>

<p>A Storage Account is a complex object, with multiple options and features. In our setup, it is used solely to create a container, similar to a folder in the file system, as a destination for the Excel file.</p>

<p><strong>‚ûî Note:</strong>
By the way, it is recommended to use the same Resource Group as for the Automation Account. If you only want to test the setup, it is sufficient to remove the Resource Group later to clean up the resources. However, this does not apply to the previously created App registration, this is independent of a Subscription and a Resource Group, because app registrations are located in Microsoft Entra ID.</p>

<p>So, moving on to the Storage Account:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_17.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_17.jpg" alt="StaledAutomation_17" /></a>
Startpage to create the Storage Account</p>

<!--
<figure>
  <img src="/MyPics/2023-08-22-StaledAutomation_17.jpg" style="width:100%">
  <figcaption>Figure 3: List with devices exported to Excel</figcaption>
</figure>
-->

<p>It is not necessary to show all the pages of the wizard that are needed to create a Storage Account in Azure. The two screenshots below summarize which options and settings work overall here.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_18.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_18.jpg" alt="StaledAutomation_18" /></a>
Summary of all values before creating the Storage Account (page 1)</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_19.jpg" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_19.jpg" alt="StaledAutomation_19" /></a>
Summary of all values before creating the Storage Account (page 2)</p>

<p>After creating the account, the overview page looks like this:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_20.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_20.png" alt="StaledAutomation_20" /></a>
Storage Account Overview Page</p>

<h3 id="add-the-container-to-the-storage-account">Add the container to the Storage Account</h3>

<p>As a final measure, you add a container to the Storage Account</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_21.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_21.png" alt="StaledAutomation_21" /></a>
Add Container to the Storage Account</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_22.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_22.png" alt="StaledAutomation_22" /></a>
Storage Account with the Container</p>

<p>Finally, let‚Äôs take a look at the access key of the Storage Account. We need the key for the variables in the Automation Account as well as for the access to the Storage Account in the Runbook. It‚Äôs best to copy it to a text file as well for later when you add the variables.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_23.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_23.png" alt="StaledAutomation_23" /></a>
Storage Account Access keys</p>

<p>Admittedly, there are more secure ways possible to handle the keys. Access keys should be stored in a secure place (Key Vault) and renewed from time to time. I‚Äôm deliberately not doing this in the example.</p>

<p>We switch back to the Automation Account in Azure. We now have everything together to create the variables.</p>

<p>So add the following variables to your account and make sure that the names of the variables match my ones shown here. Because this is how they will be referenced in the Powershell sequence for the runbook</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_24.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_24.png" alt="StaledAutomation_24" /></a>
List with variables</p>

<h2 id="add-runbook">Add Runbook</h2>

<p>Now we create the heart of the Automation account, the runbook of the ‚ÄúType‚Äù Powershell.
The name is arbitrary</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_25.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_25.png" alt="StaledAutomation_25" /></a>
Create Runbook</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_26.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_26.png" alt="StaledAutomation_26" /></a>
View Runbooks in the Automation Account</p>

<p>When the runbook is created, select it and open the editor ‚Ä¶</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_27.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_27.png" alt="StaledAutomation_27" /></a></p>

<p>‚Ä¶ paste the Powershell sequence from my repository (<a href="https://github.com/KlaBier/Powershell/blob/main/AutomationRunbookLab/RunbookCode.ps1">link</a>) into the editor</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_28.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_28.png" alt="StaledAutomation_28" /></a>
Powershell editor in the Azure Portal</p>

<p>Customize the PowerShell elements to your needs or leave them as you find them in my repository. When you are done in the PowerShell editor, it is advisable to run a test using ‚ÄúTest Pane‚Äù (1). Only then you can publish the runbook (2). As long as the runbook has not been published in the Automation Account, you cannot set up an appropriate schedule.
If all the required variables are present and the App registration and Storage Account have been created according to the instructions, the screen should look something like this after a test run:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_29.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_29.png" alt="StaledAutomation_29" /></a>
Testrun</p>

<p>In case of discrepancies, the error messages are usually self-explanatory. An error analysis should not be too much of a hurdle, since these are probably typos or something similar.
The screen log is longer than visible here. Error messages may be outside the window content. You can scroll up in the output area and see if an error was logged anywhere. 
It can be misleading that ‚ÄúCompleted‚Äù is always displayed in green, even if there are indications of an error outside the output window and thus the ‚ÄúStatus‚Äù is not green at all.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_30.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_30.png" alt="StaledAutomation_30" /></a>
Error while testing the Powershell runbook</p>

<h3 id="show-results">Show results</h3>

<p>If everything fits, the container of the Storage Account should contain the desired Excel file.</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_31.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_31.png" alt="StaledAutomation_31" /></a>
Storage Account and Excel file</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_32.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_32.png" alt="StaledAutomation_32" /></a>
List of unused user accounts</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_33.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_33.png" alt="StaledAutomation_33" /></a>
List of unused computer accounts</p>

<p>Finally, you need to add a schedule and assign it to the runbook. This step is largely self-explanatory</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_34.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_34.png" alt="StaledAutomation_34" /></a>
Planned schedule</p>

<p>What I find particularly powerful and worth mentioning here is the ability to keep multiple schedules in an Automation Account to allow for maximum flexibility in execution.</p>

<p>However the runbook is executed, it does not matter whether manually, as described above in the test, or via a schedule. You will receive an Excel file after each execution with the execution timestamp in the file name.</p>

<p>The runbook will finally look like this in the Automation Account:</p>

<p class="figcaption"><a href="/MyPics/2023-08-22-StaledAutomation_35.png" target="_blank"><img src="/MyPics/2023-08-22-StaledAutomation_35.png" alt="StaledAutomation_35" /></a>
Overview page of the completed runbook</p>

<p><strong>‚ûî Conclusion:</strong>
An Automation Account offers numerous design options. My example shows some of the many options that Automation offers. The limits here are the imagination of the administrator.</p>

<p>Why not create a new runbook in the Automation Account that takes the Excel file and deactivates computer accounts directly or deletes them every six months? Something similar can be implemented with user accounts.</p>

<p>I wish you success in administratively dealing with unused identities and with the setup described here.</p>

<p>Feel free to contact me for an exchange or if you have feedback.</p>

<p>Last but not least, the following Microsoft article is recommended:
(<a href="https://learn.microsoft.com/en-us/azure/automation/automation-runbook-execution">Runbook execution in Azure Automation</a>)</p>

<p>Cover image Niran Kasri from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2023-08-22-StaledAutomation/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2023-08-22-StaledAutomation/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2023-08-22-StaledAutomation/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name>Klaus Bierschenk</name></author><summary type="html"><![CDATA[Niran Kasri auf Pixabay]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2023-08-22-StaledAutomation_Cover.png" /><media:content medium="image" url="http://localhost:4000/MyPics/2023-08-22-StaledAutomation_Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The dilemma with unused objects in Azure AD</title><link href="http://localhost:4000/2023-03-22-FindStaledObjectsInAAD/" rel="alternate" type="text/html" title="The dilemma with unused objects in Azure AD" /><published>2023-03-22T09:00:32+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/FindStaledObjectsInAAD</id><content type="html" xml:base="http://localhost:4000/2023-03-22-FindStaledObjectsInAAD/"><![CDATA[<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_Cover.jpg" style="width:75%" />
  <figcaption>mohamed_hassan auf Pixabay</figcaption>
</figure>

<ul id="markdown-toc">
  <li><a href="#overview" id="markdown-toc-overview">Overview</a>    <ul>
      <li><a href="#device-objects" id="markdown-toc-device-objects">Device objects</a>        <ul>
          <li><a href="#azure-ad-dashboard" id="markdown-toc-azure-ad-dashboard">Azure AD Dashboard</a></li>
          <li><a href="#powershell-examples" id="markdown-toc-powershell-examples">Powershell examples</a></li>
        </ul>
      </li>
      <li><a href="#identifying-unused-user-accounts" id="markdown-toc-identifying-unused-user-accounts">Identifying unused user accounts</a>        <ul>
          <li><a href="#azure-ad-dashboard-1" id="markdown-toc-azure-ad-dashboard-1">Azure AD Dashboard</a></li>
        </ul>
      </li>
      <li><a href="#powershell-vs-graph-api" id="markdown-toc-powershell-vs-graph-api">Powershell vs. Graph API</a>        <ul>
          <li><a href="#access-reviews-zum-ermitteln-unbenutzter-konten" id="markdown-toc-access-reviews-zum-ermitteln-unbenutzter-konten">Access Reviews zum Ermitteln unbenutzter Konten</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#deutsche-version" id="markdown-toc-deutsche-version">Deutsche Version</a>    <ul>
      <li><a href="#√ºbersicht" id="markdown-toc-√ºbersicht">√úbersicht</a>        <ul>
          <li><a href="#computerkonten" id="markdown-toc-computerkonten">Computerkonten</a>            <ul>
              <li><a href="#azure-ad-dashboard-2" id="markdown-toc-azure-ad-dashboard-2">Azure AD Dashboard</a></li>
              <li><a href="#powershell-beispiele" id="markdown-toc-powershell-beispiele">Powershell Beispiele</a></li>
            </ul>
          </li>
          <li><a href="#ermitteln-unbenutzter-benutzkonten" id="markdown-toc-ermitteln-unbenutzter-benutzkonten">Ermitteln unbenutzter Benutzkonten</a>            <ul>
              <li><a href="#azure-ad-dashboard-3" id="markdown-toc-azure-ad-dashboard-3">Azure AD Dashboard</a></li>
            </ul>
          </li>
          <li><a href="#powershell-vs-graph-api-1" id="markdown-toc-powershell-vs-graph-api-1">Powershell vs. Graph API</a>            <ul>
              <li><a href="#access-reviews-zum-ermitteln-unbenutzter-konten-1" id="markdown-toc-access-reviews-zum-ermitteln-unbenutzter-konten-1">Access Reviews zum Ermitteln unbenutzter Konten</a></li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="overview">Overview</h2>
<p>It is very easy to add new users or computer objects in Azure Active Directory. Depending on the tenant settings, this can also be done quite extensively by end users themselves. Invited guest users 
or BYOD scenarios, for example. This is very convenient and timely in terms of user experience, but brings the disadvantage that over time more and more unused identities accumulate, which may no longer be needed. Guest user accounts that were used by external project members during a project, but have been forgotten afterwards. The same is true for devices registered in Azure AD. Registration is easy, even for end users, but ‚Äúout of the box‚Äù no mechanism in Azure AD ensures that device objects that are no longer used are removed as silently as they were added. Smartphones, computers are swapped or lost and users soon use another device for their work. The administrator has to keep an eye on it himself, either manually and on a regular basis, as part of various ‚Äúhousekeeping‚Äù activities that ensure good hygiene in the tenant, or the Admin establishes automatisms that generate reports of unused objects.</p>

<p>Whatever the reason for these holdovers, they are unnecessary and pose a security risk.</p>

<h3 id="device-objects">Device objects</h3>
<p>In the best case, devices should be de-registered again via a lifecycle process, for example when a device is replaced. Or if a user reports a device as lost. Companies that use mobile device management (e.g., Microsoft Intune) can define policies that react in various ways to device objects that are no longer in use, such as deactivating or deleting them directly.</p>

<p>Each time a user accesses a cloud application with his device, the attribute ‚ÄúApproximateLastLogonTimestamp‚Äù is provided with the current timestamp. Using the delta from today to the last time used, it is easy to find out when the device was last used against the tenant.</p>

<h4 id="azure-ad-dashboard">Azure AD Dashboard</h4>

<p>This is very easy to do in the Azure AD Dashboard and the filter options there in the view of the devices.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_7.png" style="width:100%" />
  <figcaption>Figure 1: Devices in the Dashboard with a predefined "Stale devices" view</figcaption>
</figure>

<p>This is helpful to look for individual devices or also with a smaller number of devices.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_1.png" style="width:100%" />
  <figcaption>Figure 2: List with devices in the Azure AD Dashboard</figcaption>
</figure>

<p>With a high number of objects, however, this is hardly possible without the Powershell.</p>

<h4 id="powershell-examples">Powershell examples</h4>
<p>Here, a list can be generated in no time at all, which can be sent by mail or otherwise serve as a basis for cleanup work. The starting point for this is the cmdlet</p>

<p class="text-center"><code class="language-plaintext highlighter-rouge">Get-AzureADDevice</code></p>

<p>For example, a list with all devices can be created like this</p>

<div class="language-posh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AzureADDevice</span><span class="w"> </span><span class="nt">-All</span><span class="p">:</span><span class="bp">$true</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select-object</span><span class="w"> </span><span class="nt">-Property</span><span class="w"> </span><span class="nx">AccountEnabled</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceId</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceOSType</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceOSVersion</span><span class="p">,</span><span class="w"> </span><span class="nx">DisplayName</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceTrustType</span><span class="p">,</span><span class="w"> </span><span class="nx">ApproximateLastLogonTimestamp</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Format-Table</span><span class="w"> 
</span></code></pre></div></div>

<p>Some examples how to filter the output for a certain period of time and how to generate an Excel list directly can be found in <a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">my Powershell repository</a></p>

<p>The result in Excel looks like this:</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_2.png" style="width:100%" />
  <figcaption>Figure 3: List with devices exported to Excel</figcaption>
</figure>

<p>With this list it is easy to implement a reaction to these detected devices, best also directly via Powershell. But be careful with deleting device objects. There is no recycle bin here from which objects can be recycled, as is the case with user objects, for example. Also, the Bitlocker Keys of the respective device are stored in Azure AD. These are lost when an object is deleted.</p>

<p>It should also be noted that a distinction is made between Hybrid AAD Joined, AAD Joined and AAD Registered for the devices. When deleting from the AAD, the state on the respective device is not changed. Depending on which type of registration the device has, different aspects are significant here. This only applies to cases where devices may still be in use. Microsoft provides some Docs articles that describe what the differences are and what to look out for.</p>

<p>Every company should have a policy that describes how unused device objects are handled:</p>
<ul>
  <li>what is the time period after which a device is considered a stale device?</li>
  <li>Is Bitlocker used? Are the keys no longer needed or do recovery keys exist?</li>
  <li>
    <p>A two-step process is suitable for removing unused devices from a tenant:</p>

    <ul>
      <li>Step1: Deactivation of the device.</li>
      <li>Step2: final deletion of the device after a defined period of time.</li>
    </ul>
  </li>
</ul>

<h3 id="identifying-unused-user-accounts">Identifying unused user accounts</h3>
<p>Even more critical than device objects are orphaned user accounts. These are easier to abuse and they come with permissions and roles.</p>

<h4 id="azure-ad-dashboard-1">Azure AD Dashboard</h4>
<p>The Azure AD User Dashboard is only partially suitable for an investigation of identities that are no longer used. If it does get used, the column with the last login time must be part of the view. This is not visible by default. It can be easily added via ‚ÄúManage view‚Äù. After that, filtering and customizing the view can be done to the best of your ability.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_3.png" style="width:100%" />
  <figcaption>Figure 4: Azure AD Dashboard showing device objects</figcaption>
</figure>

<h3 id="powershell-vs-graph-api">Powershell vs. Graph API</h3>
<p>To get information about the last logon time via script, we have to take a little detour. This is not quite as simple for users as shown above for devices, or as it may also be known from ADDS On-Premises via the property ‚ÄúLastLogonTimestamp‚Äù. At least in Azure AD it does not work directly with the ‚ÄúGet-AzureADUser‚Äù cmdlet because the ‚ÄúlastSignInDateTime‚Äù property is not stored with the user object. We get this information through the signInActivity recource type of the Graph API. For this to work well graph permissions are necessary. What these are, and what other dependencies there are, is described by Microsoft in this <a href="https://learn.microsoft.com/en-us/azure/active-directory/reports-monitoring/howto-manage-inactive-user-accounts">article</a></p>

<p>The following cmdlets show how to access user information:</p>

<div class="language-posh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Login/Connect</span><span class="w">
</span><span class="n">Connect-MgGraph</span><span class="w"> </span><span class="nt">-Scopes</span><span class="w"> </span><span class="s1">'User.Read.All'</span><span class="p">,</span><span class="w"> </span><span class="s2">"Auditlog.Read.All"</span><span class="w">

</span><span class="c"># Get list with all users</span><span class="w">
</span><span class="n">Get-MgUser</span><span class="w"> </span><span class="nt">-All</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Format-Table</span><span class="w">  </span><span class="nx">ID</span><span class="p">,</span><span class="w"> </span><span class="nx">DisplayName</span><span class="p">,</span><span class="w"> </span><span class="nx">Mail</span><span class="p">,</span><span class="w"> </span><span class="nx">UserPrincipalName</span><span class="w">
</span></code></pre></div></div>

<p>The result will look like this, for example:</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_4.bmp" style="width:100%" />
  <figcaption>Figure 5: List device objects with Powershell</figcaption>
</figure>

<p>More comprehensive options like filtering, or exporting users who last logged in before a certain date, I have also in my <a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">Powershell Repository </a></p>

<h4 id="access-reviews-zum-ermitteln-unbenutzter-konten">Access Reviews zum Ermitteln unbenutzter Konten</h4>
<p>Access Reviews are also a possibility to detect inactive users and to delete them automatically after a certain period of time. With the intervention of an administrator (approval) or without. Only for guest users or for all user accounts. So even those that are not external. All this and more can be done with Access Reviews. So you already have all the stuff that you need to build when you use Powershell. You get along completely without code. This sounds very tempting and indeed I recommend to look into this possibility if not already done.
Access Reviews have been around for a while. They were introduced at the time to review memberships in groups or to review and renew or revoke access to applications if necessary. Newly added in May 2022(<a href="https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/review-and-remove-aad-inactive-users-in-public-preview/ba-p/3290632">Link</a>) the described possibility to identify unused user activities.</p>

<p>The following figure shows the elementary part of an access review that defines a target, in this case guest accounts.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_5.png" style="width:100%" />
  <figcaption>Figure 6: Access Reviews to find unused User Objects</figcaption>
</figure>

<p>By the way, besides the direct assignment of ‚ÄúApprovers‚Äù, it is possible to specify that automatically the respective manager of the user account or the owner of the respective group that is in review becomes Approver. There is also the possibility to define multiple approvers, who can reassign previously reviewed decisions, etc. And since it can also be that employees need to edit the results of an Access Review, but for security reasons are not allowed to have access to the Azure AD portal (project office employees, for example), there is the possibility to display the Access Reviews and administer the results via ‚Äúmyaccess.microsoft.com‚Äù. This is perfect in times of Zero Trust.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_6.png" style="width:100%" />
  <figcaption>Figure 7: "mayaccess" website for non admins to administer Access Reviews</figcaption>
</figure>

<p>We‚Äôve only scratched the surface here on what Access Reviews can do. Microsoft has good articles in Microsoft Docs that describe Access Reviews in detail, including videos. With the appropriate keyword search you will quickly find what you are looking for. Have fun trying it out üòÄ</p>

<h1 id="deutsche-version">Deutsche Version</h1>

<h2 id="√ºbersicht">√úbersicht</h2>
<p>Es ist sehr einfach im Azure Active Directory neue Benutzer oder Computerobjekte hinzuzuf√ºgen. Je nach Tenant Einstellungen k√∂nnen dies auch recht umfangreich Endbenutzer selbst bewerkstelligen. Eingeladene Gastbenutzer 
oder BYOD Szenarien beispielsweise. Das ist im Sinne der Benutzererfahrung sehr komfortabel und zeitgem√§√ü, bringt aber den Nachteil mit sich, das im Laufe der Zeit mehr und mehr ungenutzte Identit√§ten ansammeln, die evtl. nicht mehr ben√∂tigt werden. Gastbenutzerkonten, die w√§hrend eines Projektes von externen Projektmitarbeitern genutzt wurden, danach aber in Vergessenheit geraten sind. Das gleiche gilt f√ºr im Azure AD registrierte Ger√§te. Die Registrierung ist einfach, auch f√ºr Endbenutzer, aber ‚Äúout of the box‚Äù sorgt kein Mechanismus im Azure AD daf√ºr, das nicht mehr benutzte Ger√§teobjekte so ger√§uschlos entfernt werden, wie sie hinzugef√ºgt wurden. Smartphones, Computer werden getauscht oder gehen verloren und Anwender benutzen alsbald ein anderes Ger√§t f√ºr ihre Arbeit. Der Administrator muss selber ein Auge darauf werfen, sei es manuell und turnusm√§√üig, als Teil von diversen ‚ÄúHousekeeping‚Äù Aktivit√§ten, die f√ºr eine gute Hygiene im Tenant sorgen, oder er etabliert Automatismen, die Reports unbenutzter Objekte generieren.</p>

<p>Was auch immer der Grund f√ºr diese √úberbleibsel ist, sie sind √ºberfl√ºssig und stellen ein Sicherheitsrisiko dar.
Schauen wir uns einige M√∂glichkeiten an, wie sich damit umgehen l√§sst</p>

<h3 id="computerkonten">Computerkonten</h3>
<p>Im besten Fall sollten Ger√§te √ºber einen Lifecycle Prozess wieder de-regestriert werden, zum Beispiel bei einem Ger√§tetausch. Oder sei es, dass ein Anwender ein Ger√§t als verloren meldet. Unternehmen, die ein ‚ÄúMobile Device Management‚Äù (z.B. Microsoft Intune) einsetzen, k√∂nnen hierf√ºr Policies definieren, die verschiedenartig auf nicht mehr benutzte Ger√§teobjekte reagieren, diese beispielsweise deaktivieren oder direkt l√∂schen.</p>

<p>Jedes mal wenn ein Anwender mit seinem Ger√§t auf eine Cloud Anwendung zugreift, wird das Attribut ‚ÄúApproximateLastLogonTimestamp‚Äù mit dem aktuellen Zeitstempel versehen. √úber das Delta von heute zu dem letzten verwendeten Zeitpunkt ist es leicht herauszufinden, wann das Ger√§t zuletzt gegen den Tenant benutzt wurde.</p>

<h4 id="azure-ad-dashboard-2">Azure AD Dashboard</h4>

<p>Sehr einfach geht das im Azure AD Dashboard und den dortigen Filterm√∂glichkeiten in der Ansicht der Ger√§te.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_7.png" style="width:100%" />
  <figcaption>Figure 1: Devices in the Dashboard with a predefined "Stale devices" view</figcaption>
</figure>

<p>Das ist hilfreich um nach einzelnen Ger√§ten zu schauen oder auch bei einer geringeren Anzahl an Devices.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_1.png" style="width:100%" />
  <figcaption>Figure 2: List with devices in the Azure AD Dashboard</figcaption>
</figure>

<p>Bei einer hohen Anzahl an Objekten geht dies aber kaum ohne die Powershell.</p>

<h4 id="powershell-beispiele">Powershell Beispiele</h4>
<p>Hier l√§sst sich im Handumdrehen eine Liste generieren, die per Mail verschickt oder anderweitig als Grundlage f√ºr Aufr√§umarbeiten dienen kann. Ausgangspunkt hierf√ºr ist das Cmdlet</p>

<p class="text-center"><code class="language-plaintext highlighter-rouge">Get-AzureADDevice</code></p>

<p>Eine Liste mit allen Ger√§ten l√§sst sich zum Beispiel so erstellen</p>

<div class="language-posh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-AzureADDevice</span><span class="w"> </span><span class="nt">-All</span><span class="p">:</span><span class="bp">$true</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">select-object</span><span class="w"> </span><span class="nt">-Property</span><span class="w"> </span><span class="nx">AccountEnabled</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceId</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceOSType</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceOSVersion</span><span class="p">,</span><span class="w"> </span><span class="nx">DisplayName</span><span class="p">,</span><span class="w"> </span><span class="nx">DeviceTrustType</span><span class="p">,</span><span class="w"> </span><span class="nx">ApproximateLastLogonTimestamp</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Format-Table</span><span class="w"> 
</span></code></pre></div></div>

<p>Einige Beispiele wie sich die Ausgabe f√ºr ein bestimmten Zeitraum filtern l√§sst und wie direkt eine Excelliste generiert wird habe ich <a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">hier zusammengestellt. </a></p>

<p>Das Ergebnis in Excel sieht dann beispielsweise so aus:</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_2.png" style="width:100%" />
  <figcaption>Figure 3: List with devices exported to Excel</figcaption>
</figure>

<p>Mit dieser Liste ist es einfach eine Reaktion auf diese ermittelten Ger√§te zu implementieren, am besten auch direkt per Powershell. Aber Vorsicht mit dem L√∂schen von Ger√§teobjekten. Es gibt hier keinen Papierkorb, aus dem sich Objekte recyclen lassen, wie dies  beispielsweise bei Benutzerobjekten der Fall ist. Auch werden die Bitlocker Keys des jeweiligen Ger√§ters im Azure AD gespeichert. Diese sind verloren, wenn ein Objekt gel√∂scht wird.</p>

<p>Zu beachten ist noch, dass bei den Ger√§ten unterschieden wird zwischen Hybrid AAD joined, AAD Joined und AAD Registered. Beim L√∂schen aus dem AAD wird der Zustand auf dem jeweiligen Ger√§t nicht ge√§ndert. Je nach dem welche Art der Registrierung das Ger√§t hat, sind hier verschiedene Aspekte bedeutend. Dies betrifft nur die F√§lle, in denen Ger√§te eventuell doch noch benutzt werden. Microsoft liefert einige Docs Artikel, die Beschreiben worin die Unterschiede liegen und worauf dabei zu achten ist.</p>

<p>Jedes Unternehmen sollte eine Richtlinie haben, die beschreibt wie mit ungenutzten Ger√§teobjekten umgegangen wird:</p>
<ul>
  <li>was ist der Zeitraum, ab dem ein Ger√§t als Staled Device gilt?</li>
  <li>kommt Bitlocker zum Einsatz? Werden die Keys nicht mehr ben√∂tigt oders existieren Recovery Keys?</li>
  <li>
    <p>zum Entfernen ungenutzter Ger√§te aus einem Tenant eignet sich ein zweistufiger Prozess:</p>

    <ul>
      <li>Step1: Deaktivieren des Ger√§tes.</li>
      <li>Step2: endg√ºltiges L√∂schen des Ger√§tes nach einem definierten Zeitraum.</li>
    </ul>
  </li>
</ul>

<h3 id="ermitteln-unbenutzter-benutzkonten">Ermitteln unbenutzter Benutzkonten</h3>
<p>Noch kritischer als bei den Ger√§teobjekten sind verwaiste Benutzerkonten. Diese sind einfacher zu missbrauchen und sie sind mit Berechtigungen und Rollen ausgestattet.</p>

<h4 id="azure-ad-dashboard-3">Azure AD Dashboard</h4>
<p>Das Azure AD User Dashboard eignet sich nur bedingt f√ºr eine Untersuchung von nicht mehr genutzten Identit√§ten. Wenn es doch eingesetzt wird, muss die Spalte mit dem letzten Anmeldezeitpunkt Teil der Ansicht sein. Diese ist standardm√§√üig nicht sichtbar. Sie l√§sst sich einfach √ºber ‚ÄúManage view‚Äù hinzuf√ºgen. Danach kann nach Kr√§ften gefiltert und die Ansicht angepasst werden.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_3.png" style="width:100%" />
  <figcaption>Figure 4: Azure AD Dashboard showing device objects</figcaption>
</figure>

<h3 id="powershell-vs-graph-api-1">Powershell vs. Graph API</h3>
<p>Um Informationen √ºber den letzten Anmeldezeitpunkt per Script zu erhalten, m√ºssen wir einen kleinen Umweg w√§hlen. Das geht bei Benutzern nicht ganz so einfach wie oben bei den Ger√§ten gezeigt, oder wie es eventuell auch vom ADDS On-Premises √ºber die Eigenschaft ‚ÄúLastLogonTimestamp‚Äù bekannt ist. Zumindest geht es im Azure AD nicht direkt mit dem Cmdlet ‚ÄúGet-AzureADUser‚Äù, da die Eigenschaft ‚ÄúlastSignInDateTime‚Äù nicht beim Benutzerobjekt gespeichert wird. Diese Informationen erhalten wir √ºber den signInActivity recource type der Graph API. Damit dies gut funktioniert sind Graph Berechtigungen notwendig. Welche das sind, und welche weiteren Abh√§ngigkeiten es gibt, beschreibt Microsoft in diesem  <a href="https://learn.microsoft.com/en-us/azure/active-directory/reports-monitoring/howto-manage-inactive-user-accounts">Beitrag</a></p>

<p>Folgende Cmdlets zeigen den Zugriff auf Benutzerinformationen:</p>

<div class="language-posh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Login/Connect</span><span class="w">
</span><span class="n">Connect-MgGraph</span><span class="w"> </span><span class="nt">-Scopes</span><span class="w"> </span><span class="s1">'User.Read.All'</span><span class="p">,</span><span class="w"> </span><span class="s2">"Auditlog.Read.All"</span><span class="w">

</span><span class="c"># Get list with all users</span><span class="w">
</span><span class="n">Get-MgUser</span><span class="w"> </span><span class="nt">-All</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Format-Table</span><span class="w">  </span><span class="nx">ID</span><span class="p">,</span><span class="w"> </span><span class="nx">DisplayName</span><span class="p">,</span><span class="w"> </span><span class="nx">Mail</span><span class="p">,</span><span class="w"> </span><span class="nx">UserPrincipalName</span><span class="w">
</span></code></pre></div></div>

<p>Das Ergebnis sieht dann beispielsweise so aus:</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_4.bmp" style="width:100%" />
  <figcaption>Figure 5: List device objects with Powershell</figcaption>
</figure>

<p>Umfassendere M√∂glichkeiten wie Filterung, oder den Export von Benutzern, die sich vor einem bestimmten Datum zuletzt angemeldet haben, habe ich in meinem <a href="https://github.com/KlaBier/Powershell/tree/main/FindUnusedObjects">Powershell Repository </a></p>

<h4 id="access-reviews-zum-ermitteln-unbenutzter-konten-1">Access Reviews zum Ermitteln unbenutzter Konten</h4>

<p>Access Reviews sind ebenfalls eine M√∂glichkeit inaktive Benutzer aufzuspr√ºren und diese automatisch nach einer gewissen Zeitspanne zu l√∂schen. Mit Zutun eines Administrators (Approval) oder ohne. Nur f√ºr Gastbenutzer oder f√ºr s√§mtliche Benutzerkonten. Also auch diejenigen, die nicht extern sind. All das und mehr l√§sst sich mit Access Reviews bewerkstelligen. Sie bringen also das ganze Drumherum bereits mit, dass bei Vorgehensweise √ºber die Powershell erst zu bauen ist. Sie kommen komplett ohne Code aus. Das klingt sehr verlockend und in der Tat empfehle ich sich mit dieser M√∂glichkeit auseinanderzusetzen, wenn noch nicht geschehen.
Access Reviews gibt es schon l√§nger. Sie wurden seinerzeit eingef√ºhrt um Mitgliedschaften in Gruppen oder um den Zugriff auf Anwendungen zu pr√ºfen und gegebenenfalls zu verl√§ngern oder zu entziehen. Neu hinzugekommen ist im Mai 2022 ( <a href="https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/review-and-remove-aad-inactive-users-in-public-preview/ba-p/3290632">Link</a>) die beschriebene M√∂glickeit ungenutzte Benuterzeraktivit√§ten zu ermitteln.</p>

<p>Nachfolgende Abbildung zeigt den elementaren Teil eines Access Reviews der ein Ziel definiert, in dem Fall Gastkonten.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_5.png" style="width:100%" />
  <figcaption>Figure 6: Access Reviews to find unused User Objects</figcaption>
</figure>

<p>√úbrigens l√§sst sich neben dem direkten Zuweisen von ‚ÄúApprovern‚Äù angeben, dass automatisch der jeweilige Manager des Benutzerkontos oder der Owner der jeweiligen Gruppe, die im Review ist, zu Approver werden. Es besteht auch die M√∂glichkeit mehrere Genehmiger zu hinterlegen, die zuvor gepr√ºfte Entscheidungen neu treffen k√∂nnen usw. Und da es auch sein kann, das Mitarbeiter die Ergebnisse eines Access Reviews bearbeiten m√ºssen, die aber aus Gr√ºnden der Sicherheit keinen Zugriff auf das Azure AD Portal haben d√ºrfen(Projektofficemitarbeiter z.B.), besteht die M√∂glichkeit √ºber myaccess.microsoft.com die Access Reviews anzuzeigen und die Ergebnisse zu administrieren. Das ist absolut zeitgem√§√ü in Zeiten von Zero Trust.</p>

<figure>
  <img src="/MyPics/2023-03-22-FindStaledObjectsInAAD_6.png" style="width:100%" />
  <figcaption>Figure 7: "mayaccess" website for non admins to administer Access Reviews</figcaption>
</figure>

<p>Wir haben hier nur an der Oberfl√§che gekratzt, bei den M√∂glichkeiten, die Access Reviews bieten. Microsoft hat in Microsoft Docs gute Artikel die Access Reviews im Detail beschreiben, auch Videos. Mit entsprechender Schlagwortsuche wirst du dort schnell f√ºndig. Viel Spa√ü beim Ausprobieren üòÄ</p>

<p>Cover image Mohamed Hassan from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2023-03-22-FindStaledObjectsInAAD/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2023-03-22-FindStaledObjectsInAAD/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2023-03-22-FindStaledObjectsInAAD/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name>Klaus Bierschenk</name></author><summary type="html"><![CDATA[mohamed_hassan auf Pixabay]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2023-03-22-FindStaledObjectsInAAD_Cover.jpg" /><media:content medium="image" url="http://localhost:4000/MyPics/2023-03-22-FindStaledObjectsInAAD_Cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Check your Azure AD for expiring App Secrets</title><link href="http://localhost:4000/2023-01-07-GetSecretInfos/" rel="alternate" type="text/html" title="Check your Azure AD for expiring App Secrets" /><published>2023-01-07T10:00:32+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/GetSecretInfos</id><content type="html" xml:base="http://localhost:4000/2023-01-07-GetSecretInfos/"><![CDATA[<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_Cover.jpg" style="width:75%" />
<!--  <figcaption>Figure 1: This can be any text here</figcaption> -->
</figure>

<ul id="markdown-toc">
  <li><a href="#english-version" id="markdown-toc-english-version">English version</a>    <ul>
      <li><a href="#in-general" id="markdown-toc-in-general">In general</a></li>
      <li><a href="#challenge-with-client-secrets" id="markdown-toc-challenge-with-client-secrets">Challenge with Client Secrets</a></li>
    </ul>
  </li>
  <li><a href="#beitrag-in-deutsch" id="markdown-toc-beitrag-in-deutsch">Beitrag in Deutsch</a>    <ul>
      <li><a href="#grundlegendes" id="markdown-toc-grundlegendes">Grundlegendes</a></li>
      <li><a href="#herausforderung-bei-client-secrets" id="markdown-toc-herausforderung-bei-client-secrets">Herausforderung bei Client Secrets</a></li>
    </ul>
  </li>
</ul>

<h1 id="english-version">English version</h1>
<p>To enable app registrations to authenticate themselves to other services, they have the option of adding credentials to them. Either certificates or so-called client secrets are used. Federated credentials are also possible, but the first two are probably the most common in my experience.</p>

<p>Microsoft recommends certificates. These offer higher security compared to Client Secrets. A Secret is basically nothing more than an ‚Äúapplication password‚Äù, with all the uncertainties that come with passwords. They are hard-coded into applications, posted in MS Teams chats, or sent by mail. In times of zero trust, you really don‚Äôt want that anymore.</p>
<h2 id="in-general">In general</h2>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_I.png" style="width:100%" />
  <figcaption>App Registration Dashboard - showing a Secret</figcaption>
</figure>

<p>So, Microsoft‚Äôs recommendation to prefer certificates is understandable. In my practice, however, I often see the use of client secrets. Not surprisingly, after all, they are quick and easy to set up and available in no time.
Microsoft offers a wealth of Docs articles that address the authentication of App Registrations. To describe the topic here again in my own words makes little sense. Rather, I feel it is important to point out a particular circumstance that Microsoft does not address in the docs in this way, but which I encounter frequently in practice and which we will now look at.</p>

<h2 id="challenge-with-client-secrets">Challenge with Client Secrets</h2>
<p>Besides the mentioned disadvantages of passwords, there is a serious disadvantage of Client Secrets. The maximum validity period can individually specified and it has a maximum of 24 months. This is configured when the secret is created. Unfortunately, there is no possibility to inform the owner of the app registration or other mail addressees when the validity period of a client secret is about to end. This would leave time to generate a new one and integrate the new password (the secret) for example on a web page or in the code.</p>

<p>In practice, this means that a secret is configured for an app registration and is logically forgotten. At some point, the validity of the secret ends and an application that used to work suddenly stops working. The search continues until the evil is finally found. And on top of that, it‚Äôs urgent, because the application is definitely no longer working as it should.</p>

<p>Let‚Äôs hope that Microsoft will soon integrate the possibility of a notification, similar to the SAML certificate for an enterprise application.</p>

<p>If the threat is known, it can be dealt with in advance in various ways, for example, a SIEM can keep an eye on the expiration dates of the Secrets.</p>

<p>In case this is not available, it might make sense to create an old-fashioned CSV file that generates a list of all app registrations in the tenant. Act instead of react is the motto here. For my activities in the field, I have a small Powershell script that creates two CSV text files:</p>

<p>(a) list with all App Registrations, all Owners and then again per Owner all Secrets.
This is redundant in terms of information, but if the CSV file is imported into Excel, there is a good possibility of filtering in many ways.</p>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_II.png" style="width:100%" />
  <figcaption>Imported CSV with all App Regs, their Secrets and "one" Owner</figcaption>
</figure>

<p>b) A list of all app registrations and all secrets. In this case, however, only one owner.</p>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_III.png" style="width:100%" />
  <figcaption>Imported CSV with all App Regs, their Secrets and "all" Owner</figcaption>
</figure>

<p>It may make sense to regularly create these lists as part of an operational manual, when no other monitoring is available, to see what is happening here with expiring Secrets.</p>

<p>The script is primarily intended as an illustrative material. It is possible to extend it in many ways and to adapt it to your own needs. The integration into an automation runbook, into a logic app with resulting mail dispatch to the mail addresses of the listed owners are only a few examples.</p>

<p>Please find the Powershell Script here: <a href="https://github.com/KlaBier/Powershell">Script </a></p>

<h1 id="beitrag-in-deutsch">Beitrag in Deutsch</h1>
<h2 id="grundlegendes">Grundlegendes</h2>
<p>Damit App Registrations sich gegen√ºber anderen Diensten authentifizieren k√∂nnen, verf√ºgen sie √ºber die M√∂glichkeit ihnen Credentials hinzuzuf√ºgen. Dabei kommen entweder Zertifikate zum Einsatz oder sogenannte Client Secrets. Federated Credentials sind ebenfalls m√∂glich, aber die beiden erstgenannten sind nach meiner Erfahrung wohl die am gebr√§uchlichsten.</p>

<p>Microsoft empfiehlt Zertifikate. Diese bieten h√∂here Sicherheit gegen√ºber den Client Secrets. Ein Secret ist im Grunde genommen nichts anderes als ein ‚ÄúApplicationspassword‚Äù, mit allen Unsicherheiten, die es im Zusammenhang mit Passw√∂rtern gibt. Sie werden in Anwendungen hart codiert eingef√ºgt, in MS Teams Chats geposted oder per Mail versendet. Das m√∂chte man in Zeiten von Zero Trust eigentlich nicht mehr haben.</p>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_I.png" style="width:100%" />
  <figcaption>App Registration Dashboard - einzelnes Secret</figcaption>
</figure>

<p>Also, Microsofts Empfehlung, Zertifikate vorzuziehen, ist nachvollziehbar. In meiner Praxis erlebe ich aber h√§ufig die Verwendung von Client Secrets. Wen wundert es, schlie√ülich sind diese schnell und unkompliziert angelegt und im Nullkommanix verf√ºgbar.
Microsoft bietet eine F√ºlle an Docs Artikeln, die die Authentifizierung von App Registrations thematisieren. Das Thema hier mit meinen Worten erneut zu beschreiben, macht wohl wenig Sinn. Mir ist es vielmehr wichtig auf einen besonderen Umstand hinzuweisen, den Microsoft so nicht in den Beitr√§gen thematisiert, der mir aber in der Praxis h√§ufig begegnet und den wie wir uns jetzt anschauen.</p>

<h2 id="herausforderung-bei-client-secrets">Herausforderung bei Client Secrets</h2>
<p>Neben den genannten Nachteilen von Passw√∂rtern gibt es einen gravierenden Nachteil von Client Secrets. Die maximale G√ºltigkeitsdauer eines manuell hinzugef√ºgten Secrets liegt bei 24 Monaten. Diese wird angegeben, wenn das Secret erstellt wird. Leider besteht nicht die M√∂glichkeit den Owner der App Registration oder andere Mailadressaten dar√ºber zu informieren, wenn der Zeitraum f√ºr die G√ºltigkeit eines Client Secret alsbald endet. Somit bliebe Zeit einen neuen zu generieren und das neue Passwort (den Secret) beispielsweise auf einer Webseite oder im Code zu integrieren.</p>

<p>In der Praxis sieht das dann oft so aus, dass ein Secret f√ºr eine App Registration konfiguriert ist und logischerweise in Vergessenheit ger√§t. Irgendwann endet dann die G√ºltigkeit und eine Anwendung, die bislang funktionierte, funktioniert pl√∂tzlich nicht mehr. Die Sucherei geht los, bis das √úbel endlich gefunden ist. Und obendrein ist Eile ist geboten, da die Anwendung definitiv nicht mehr funktioniert, wie sie sollte.</p>

<p>Bleibt zu hoffen, dass Microsoft hier bald die M√∂glichkeit einer Benachrichtigung integriert, √§hnlich wie dies beispielsweise bei einem SAML Zertifikat f√ºr eine Enterprise Application der Fall ist</p>

<p>Wenn man die drohende Gefahr kennt, l√§sst sich im Vorfeld verschiedenartig damit umgehen, beispielsweise kann ein SIEM ein Auge auf die Ablaufdaten der Secrets werfen.</p>

<p>F√ºr den Fall, das dies nicht vorhanden ist, kann aber eventuell das Erstellen einer altmodische CSV-Datei Sinn machen, die eine Liste aller App Registrations im Tenant generiert. Agieren statt regieren ist hier die Devise. Aus meiner t√§glichen Arbeit habe ich ein kleines Powershell Script, das zwei CSV-Textdateien erstellt:</p>

<p>a)  Liste mit allen App Registrations, allen Ownern und dann wiederum pro Owner alle Secrets
Das ist von den Infos her gesehen zwar redundant, aber wird die CSV-Datei in Excel importiert, besteht so eine gute M√∂glichkeit der Filterung in vielerlei Auspr√§gung</p>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_II.png" style="width:100%" />
  <figcaption>Importierte CSV-Datei mit allen Secrets und "einem" Owner</figcaption>
</figure>

<p>b) Eine Liste aller App Registrations und allen Secrets. In diesem Fall aber nur ein Owner.</p>

<figure>
  <img src="/MyPics/2023-01-07-GetSecretInfos_III.png" style="width:100%" />
  <figcaption>Importierte CSV-Datei mit allen Secrets und "allen" Ownern</figcaption>
</figure>

<p>Es kann Sinn machen regelm√§√üig diese Listen dokumentiert als Teil eines Betriebshandbuches f√ºr das Azure AD zu erstellen, wenn keine weitere √úberwachung verf√ºgbar ist, um zu sehen was der Status in Bezug auf ablaufende Secrets im Tenant ist.</p>

<p>Das Script ist prim√§r als Anschauungsmaterial gedacht. Es besteht die M√∂glichkeiten es in vielerlei Hinsicht auszubauen und es an eigene Bed√ºrfnisse anzupassen. Die Integration in ein Automation Runbook, in eine Logic App mit daraus resultierender Mailversand, an die Maildressen der gelisteten Owner, sind nur einige Beispiele</p>

<p><a href="https://github.com/KlaBier/Powershell/tree/main/AAD_Secret_Infos">Link zu dem Powershell Script </a></p>

<p>Cover image Stefan Coders from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2023-01-07-GetSecretInfos/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2023-01-07-GetSecretInfos/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2023-01-07-GetSecretInfos/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name>Klaus Bierschenk</name></author><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2023-01-07-GetSecretInfos_Cover.jpg" /><media:content medium="image" url="http://localhost:4000/MyPics/2023-01-07-GetSecretInfos_Cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Want to switch off ADFS? Looking for some content?</title><link href="http://localhost:4000/2022-01-10-GoodBye-ADFS-Overview/" rel="alternate" type="text/html" title="Want to switch off ADFS? Looking for some content?" /><published>2022-01-10T00:06:32+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/GoodBye-ADFS-Overview</id><content type="html" xml:base="http://localhost:4000/2022-01-10-GoodBye-ADFS-Overview/"><![CDATA[<figure>
  <img src="/MyPics/2022-01-09-GoodBye-ADFS-Linklist_I.png" style="width:75%" />
  <figcaption>Figure 1: Federation Services Splash Screen</figcaption>
</figure>

<p>Don‚Äôt get me wrong, ADFS is great. But it is also a technology with a long history and can (in some cases) be replaced by a better and easier technology in our modern Azure AD World.</p>

<p>But where to start when you have a bunch of applications relying in ADFS?</p>

<p>Or when you might have a relying party to M365 with your federated Azure AD Domain?</p>

<p>Then there are a couple of activities waiting for you ‚Ä¶</p>

<p>I attended some sessions last year on shutting down ADFS, and in migrating Relying Party Trusts from ADFS to Azure AD Enterprise Applications, for enduser SSO experiences. From those events and talks I got my own short archive with a list of articles and videos from Microsoft which covers related topics.</p>

<p>In some cases it can make sense to get rid of the ADFS deployment and use PTA or PHS instead and also to move your relying party trusts to Azure AD Enterprise Applications. With this approach you can use the entire stack of Zero Trust features whilst accessing your applications. Conditional access e.g.</p>

<p>Therefore it is a good time to start with migration considerations ‚Ä¶ if not done already</p>

<table>
  <thead>
    <tr>
      <th>Description</th>
      <th>Link/Reference</th>
      <th>Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Upgrade from Active Directory Federation Services (AD FS)</td>
      <td><a href="https://www.microsoft.com/en-us/security/business/identity-access-management/upgrade-adfs" target="_blank">Show Article</a></td>
      <td>Overview of the entire situation! Start reading here when you plan to upgrade from ADFS to Azure AD. Contains comparison between ADFS and Azure AD Features</td>
    </tr>
    <tr>
      <td>Migrate from federation to PHS or PTA</td>
      <td><a href="https://docs.microsoft.com/en-us/azure/active-directory/hybrid/migrate-from-federation-to-cloud-authentication" target="_blank">Show Article</a></td>
      <td>Good article with lots of considerations in planning and required pre-work on the entire migration process flow. Also covers step-by-step guidance for implementation. Provides links to more additional articles for topics which are not covered</td>
    </tr>
    <tr>
      <td>Migrate application authentication to Azure Active Directory</td>
      <td><a href="https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/migrate-application-authentication-to-azure-active-directory" target="_blank">Show Article</a></td>
      <td>Bring time to read this one (30min read). Sophisticated article with details reagarding application migration from ADFS to Azure AD</td>
    </tr>
    <tr>
      <td>ADFS Activity Report</td>
      <td><a href="https://aka.ms/migrateapps/ADFSactivity" target="_blank">Show Article</a></td>
      <td>Explains how a ADFS activity report can be created to discover AD FS applications that can be migrated (or not). Covers additional claim rule support aswell</td>
    </tr>
    <tr>
      <td>Videos with topics to upgrade your apps authentication from ADFS to Azure AD</td>
      <td><a href="http://aka.ms/upgradeadfstoaad" target="_blank">Get Videos</a></td>
      <td>Short Videos on YouTube (5-7 min each) from MS Security</td>
    </tr>
    <tr>
      <td>Resources for migrating applications to Azure Active Directory</td>
      <td><a href="https://docs.microsoft.com/en-us/azure/active-directory/manage-apps/migration-resources" target="_blank">Show Article</a></td>
      <td>Links with resources for migration (deployment plan etc.)</td>
    </tr>
    <tr>
      <td>ADFS to AAD App Migration tool</td>
      <td><a href="https://aka.ms/migrateapps/ADFStools" target="_blank">Open Github</a></td>
      <td>Powershell based tools box with cmdlets to collect and analyze ADFS apps. Includes Excel export and cmdlets for migration</td>
    </tr>
  </tbody>
</table>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2022-01-10-GoodBye-ADFS-Overview/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2022-01-10-GoodBye-ADFS-Overview/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2022-01-10-GoodBye-ADFS-Overview/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[summary of ADFS decommissioning aspects]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2022-01-09-GoodBye-ADFS-Linklist_Cover.png" /><media:content medium="image" url="http://localhost:4000/MyPics/2022-01-09-GoodBye-ADFS-Linklist_Cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">How to change language in M365 Portal for a synchronized identity</title><link href="http://localhost:4000/2021-07-04-ChangeLanguageinM365Portal/" rel="alternate" type="text/html" title="How to change language in M365 Portal for a synchronized identity" /><published>2021-07-04T00:01:32+02:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/ChangeLanguageinM365Portal</id><content type="html" xml:base="http://localhost:4000/2021-07-04-ChangeLanguageinM365Portal/"><![CDATA[<figure>
  <img src="/MyPics/2021-06-23-ChangeLanguageinM365Portal_cover.png" style="width:60%" />
</figure>

<h2 id="puzzling-why-language-can-not-be-changed-in-m365-portal-for-synced-users">Puzzling why language can not be changed in M365 Portal for synced users?</h2>

<p>Changing the language in the Azure portal instead is quite simple. Just click on the gear icon in the upper right corner and then on the language item, change it, save and you‚Äôre done. And the whole thing in the Azure Portal is independent of whether you are currently working with a cloud-only identity or with a synchronized account. So far so good üòÉ</p>

<p>However, there is one issue in my daily life that I have been wondering about and putting off for quite some time. Whenever I work with a synchronized account in the M365 Admin portal and try to change the language there, the following message is shown:</p>

<p>if the language is in German</p>

<figure>
  <img src="/MyPics/2021-06-23-ChangeLanguageinM365Portal_II.png" style="width:75%" />
  <figcaption>Figure 1: Language Setting in German</figcaption>
</figure>

<p>and when you have set it already in English language</p>

<figure>
  <img src="/MyPics/2021-06-23-ChangeLanguageinM365Portal_IV.png" style="width:75%" />
  <figcaption>Figure 2: Language setting in English</figcaption>
</figure>

<p>Now the whole thing becomes clumsy at last when you are the administrator yourself, as in my case. In my daily work the language was German, it was ok and the whole thing does not belong to my main issues. But whenever I try to change the language, I wonder at which central place this setting has to be made? On the myaccount.microsoft.com page? Or in some other place in the M365 portal?</p>

<p>This week I didn‚Äôt have the topic with the language in the M365 portal present at all and I was in completely different topics in the Active Directory and with the attributes. But after looking through the list of attributes, I noticed the <strong>preferredLanguage</strong> attribute</p>

<figure>
  <img src="/MyPics/2021-06-23-ChangeLanguageinM365Portal_III.png" style="width:50%" />
  <figcaption>Figure 3: Use Attribute "preferredLanguage" to set requested language</figcaption>
</figure>

<p>I remembered the language in the Microsoft 365 portal and indeed the attribute is used to set the language in Microsoft 365 in the form of the ‚ÄúLanguage Culture Names‚Äù. So <strong>de-DE</strong> stands for German and <strong>en-US</strong> for English - United States etc.. You can find an overview of the codes here:
<a href="https://docs.microsoft.com/en-us/previous-versions/commerce-server/ee825488(v=cs.20)?redirectedfrom=MSDN">Table of Language Culture Names</a></p>

<p>My first thought was, not really consistent from Microsoft to control the language behavior differently in two portals (Azure / M365), at least for synchronized identities. But the language is not changed too often and managing it centrally in on-premises for accounts originating there can make sense. After all, many other settings are also administered there, why not the language as well?</p>

<p>Cover image by Mary Pahlke from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2021-07-04-ChangeLanguageinM365Portal/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2021-07-04-ChangeLanguageinM365Portal/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2021-07-04-ChangeLanguageinM365Portal/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2021-06-23-ChangeLanguageinM365Portal_cover.png" /><media:content medium="image" url="http://localhost:4000/MyPics/2021-06-23-ChangeLanguageinM365Portal_cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Zero Trust in Azure Identity - Part 5: Simple Monitoring Break Glass Accounts</title><link href="http://localhost:4000/2021-01-22-ZeroTrust-Monitoring/" rel="alternate" type="text/html" title="Zero Trust in Azure Identity - Part 5: Simple Monitoring Break Glass Accounts" /><published>2021-01-22T23:01:32+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/ZeroTrust%20Monitoring</id><content type="html" xml:base="http://localhost:4000/2021-01-22-ZeroTrust-Monitoring/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#monitoring-and-dealing-with-critical-user-accounts" id="markdown-toc-monitoring-and-dealing-with-critical-user-accounts">Monitoring and Dealing with critical user accounts</a></li>
  <li><a href="#keep-ad-logs-perfectly" id="markdown-toc-keep-ad-logs-perfectly">Keep AD logs perfectly</a></li>
  <li><a href="#automated-alerts" id="markdown-toc-automated-alerts">Automated alerts</a></li>
  <li><a href="#be-careful-with-access-reviews" id="markdown-toc-be-careful-with-access-reviews">Be careful with Access Reviews</a></li>
</ul>

<h2 id="monitoring-and-dealing-with-critical-user-accounts">Monitoring and Dealing with critical user accounts</h2>

<p>Microsoft recommends so-called Break Glass accounts for emergency access. These have maximum permissions and are exempt from security measures such as ‚ÄúConditional Access‚Äù policies. If something goes wrong with any policy or with the connection to on-premises, it is possible to access the tenant with these unaffected Break Glass accounts. In the first part of this post, we looked at more details about Break Glass accounts.
However, it is not only important to be prepared for an emergency. It is equally important to monitor activities around these accounts. For simplicity, the administrator has created a group with the accounts stored in the ‚ÄúExcludes‚Äù in the policies. But what if someone cheats his way into this group with his account? The person could work unhindered with wide rights past all policies and thus represents a high risk. Since all activities are documented in the Azure logs, it is easy based on these logs to react to entries using KQL (Kusto Query Language) queries and, for example, send a mail and an SMS to a sender circle when changes are made to the BGA group. The following is necessary for this.</p>

<h2 id="keep-ad-logs-perfectly">Keep AD logs perfectly</h2>

<p>First of all, a log analytics workspace is needed to which Azure automatically sends the AD logs. This makes sense even without our example with the BGA accounts, since the monitoring and logon logs are kept on a limited basis. For Azure AD P1/P2 license 30 days otherwise 7 days.
The Log Analytics workspace is quickly created in the Azure Portal in the dashboard of the same name. In Azure AD, the workspace is added to the diagnostic settings. Thus, the entries end up in the storage account of the workspace, for which the retention period can be defined as desired. Step-by-step instructions for this can be found in the Azure Docs with the corresponding keyword search.</p>

<h2 id="automated-alerts">Automated alerts</h2>

<p>The alerts view for a Log Analytics workspace lists the alert rules that the administrator has created here over time. If you create a new alert rule, the essential elements are a condition and an action group. Both can be created directly at this point. In the same way, you can also use existing conditions or action groups and reuse them as you wish.
If a new action group is created, it may either contain notifications or actions or both. For a notification as in our example, a message definition is sufficient. To do this, we define both a mail and SMS send type in the group, which justifies a change to a critical group, such as the group containing BGA accounts. Note that action groups can be used in a variety of ways, including triggering a webhook or starting an automation runbook.
The second part in the warning rule, the condition, is essentially based on a KQL query that can bring to light from the workspace anything stored in the logs there. Besides our area, the ‚Äúaudit log‚Äù, which we need to specify as the source here, there are other areas in a Log Analytics workspace. This ultimately depends on what data sources are connected to the Log Analytics.
Regardless of the alert rules, you can reach the KQL Editor in the Log Analytics workspace via the ‚ÄúLogs‚Äù option. Here, several examples are waiting to be tried out and modified for your own purposes. The whole thing invites you to try it out and it is not critical either. KQL queries are the foundation for warnings and the administrative expertise required for this wants to be learned through trial and error.</p>

<p>Back to our warning rule: figure (KQL group change.png) shows the basic statement and the KQL editor with the explorer.</p>

<figure class="medium">
  <a href="/MyPics/2021-01-22-ZeroTrust Monitoring_I.png"><img src="/MyPics/2021-01-22-ZeroTrust Monitoring_I.png" /></a>
  <figcaption>Exclude BGAs from CAs. A "must" in CA deployment</figcaption>
</figure>

<p>The statement is stripped down to the bare essentials and could still be drilled down, for example to include a temporal filter. In the lower area of the results you can see which values the result still provides, which are therefore part of the log entry. In addition to the account that the BGA group has changed, the account that has been added to the group is also visible here.
The KQL statement is inserted into the condition and is thus part of the signal logic (Figure: Warning_Rule_Condition_SignalLogic.png). A number greater than 0 in the case means that the KQL statement was found, thus a change to the group has taken place and this in turn entails that as part of the warning rule the condition is met and the mail and SMS are sent. This is the principle of warnings in Log Analytics. It is recommended in the context of Break Glass accounts to also generate a warning when a BGA account logs in, which can then be acted upon in the manner described. If we assume that all BGA user accounts start with ‚ÄúBG‚Äù, so for example the UPN is ‚ÄúBGAx@kbcorp.de‚Äù with sequential number x. The KQL statement for this looks like the following:</p>

<div class="language-posh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SigninLogs</span><span class="w">
</span><span class="o">|</span><span class="w"> </span><span class="n">where</span><span class="w"> </span><span class="nx">OperationName</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"Sign-in activity"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">where</span><span class="w"> </span><span class="nx">UserPrincipalName</span><span class="w"> </span><span class="nx">startswith</span><span class="w"> </span><span class="s2">"BG"</span><span class="o">.</span><span class="w"> 
</span></code></pre></div></div>

<h2 id="be-careful-with-access-reviews">Be careful with Access Reviews</h2>

<p>Actually, access reviews lend themselves to the control of BGA groups, but caution is advised in that context. Access Reviews also always allow members of a group to be removed, be it because an admin on his iPhone, on the go, mistakenly selects ‚Äúdeny‚Äù, the BGA accounts fall out of the group and are thus unsuitable for emergency use. Admittedly a contrived example but the possibility exists and with sensitive accounts such as the BGA accounts you should leave nothing to chance and fare far better with the warning rules against Access Reviews in the event of controls on the break Glass accounts.</p>

<p>Cover image by Peggy und Marco Lachmann-Anke from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2021-01-22-ZeroTrust-Monitoring/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2021-01-22-ZeroTrust-Monitoring/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2021-01-22-ZeroTrust-Monitoring/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[Keep an eye to the most sensitive accounts in your Azure AD]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2021-01-22-ZeroTrust%20Monitoring_cover.png" /><media:content medium="image" url="http://localhost:4000/MyPics/2021-01-22-ZeroTrust%20Monitoring_cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Zero Trust in Azure Identity - Part 4: Access Reviews</title><link href="http://localhost:4000/2021-01-19-ZeroTrust-AR/" rel="alternate" type="text/html" title="Zero Trust in Azure Identity - Part 4: Access Reviews" /><published>2021-01-19T14:22:32+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/ZeroTrust%20AR</id><content type="html" xml:base="http://localhost:4000/2021-01-19-ZeroTrust-AR/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#goodbye-forgotten-group-memberships" id="markdown-toc-goodbye-forgotten-group-memberships">Goodbye forgotten group memberships</a></li>
  <li><a href="#access-review-using-an-example" id="markdown-toc-access-review-using-an-example">Access Review using an example</a></li>
  <li><a href="#fine-tuning-for-access-control" id="markdown-toc-fine-tuning-for-access-control">Fine tuning for access control</a></li>
  <li><a href="#access-reviews-vs-dynamic-groups" id="markdown-toc-access-reviews-vs-dynamic-groups">Access Reviews vs. Dynamic Groups</a></li>
</ul>

<h2 id="goodbye-forgotten-group-memberships">Goodbye forgotten group memberships</h2>

<p>Who hasn‚Äôt had this happen to them? A user account is added to a group and then you forget to remove the member? Unfortunate if the group is a security-sensitive group or role, and there are quite a few of those in Azure. One remedy for this is the ‚ÄúAccess Reviews‚Äù, or access checks, in German portal language. Access reviews are a means of putting groups, roles or enterprise applications to the test and validating the members assigned or contained.
The settings in the Azure AD portal can be found in the objects for which you want to create a check. This means in the area of the groups or enterprise applications. The exception to this are the roles, whose ‚ÄúAccess Reviews‚Äù are not administered in Azure AD in the roles, but in the PIM Dashboard. Somewhat hidden after selecting the ‚ÄúManage‚Äù option. By the way, do not confuse this with the item ‚ÄúReview Access‚Äù, which is located in PIM directly above, under ‚ÄúTasks‚Äù. This is used to process any pending reviews for the user account that is currently navigating in the PIM portal and is stored as a reviewer.</p>

<h2 id="access-review-using-an-example">Access Review using an example</h2>

<p>To explain the options available when reviewing roles, let‚Äôs take a look at an example of the settings you may encounter. Let‚Äôs say you want to review the members of the Global Reader role on a weekly basis and remove any user accounts you no longer need that you know should not be members there. To do this, we navigate to the ‚ÄúManage‚Äù section in the PIM Dashboard and select the ‚ÄúAzure AD Roles‚Äù option, from where we go directly to the access checks. Many of the setting options are self-explanatory, such as the name or even the start date. One of the elementary options here is the time frame, notably the ‚ÄúDuration (in days)‚Äù option. This defines the period for which an ‚ÄúAccess Review‚Äù is available and reviewers can make entries. The number of days possible here again depends on whether and which ‚ÄúFrequency‚Äù is selected, as the duration must not be longer than the number of days in the selected period, otherwise time overlaps will occur during the reviews. For our example, we select the weekly interval and 1 day for the duration. You can specify more than one role, but for our example we will limit ourselves to the role ‚ÄúGlobal Reader‚Äù.
Further down in the dialog you specify the already mentioned reviewers. If there are several decision makers in your department, it may make sense to specify all of them here. If one of them starts the check, the list will later show for which user accounts the membership was approved or denied and also who decided this.</p>

<h2 id="fine-tuning-for-access-control">Fine tuning for access control</h2>

<p>At the very bottom of the dialog there is still the possibility of ‚Äúfine tuning‚Äù via some advanced settings. Here you can specify whether accounts are actually removed or not. If no, this is only logged, which is useful for a test phase, for example. Especially worth mentioning at this point is the possibility to define what should happen if the reviewer(s) do not react. ‚ÄúNo changes‚Äù, ‚ÄúRemove access‚Äù, ‚ÄúApprove access‚Äù or ‚ÄúFollow recommendations‚Äù. In the case of the latter, the system decides on the continued existence of the membership. For example, has a user not logged in for a period of 30 days? In that case, the role membership would be removed. Also hidden, but possibly very useful, is the possibility to select ‚ÄúMembers (self)‚Äù in the checker. As the name already conveys, no other persons are requested to check, but the members themselves. This kind of check is basically a ‚Äúknot in the handkerchief‚Äù that the administrator makes himself here to be reminded of the membership. An administratively probably rather rare scenario, but if the admin wants it, the option can certainly provide valuable services.</p>

<h2 id="access-reviews-vs-dynamic-groups">Access Reviews vs. Dynamic Groups</h2>

<p>When using access reviews for Azure AD groups, it is worth mentioning the possibility of dynamic groups, which permanently fill the security groups with members based on query rules. This can replace access checks and may be a more elegant way to deal with members, as the admin does not have to worry about anything else with a well-defined query. Of course, this only applies to groups where dynamic membership is appropriate and not to roles and enterprise applications, as there is no dynamic assignment here. Here, it is important to plan well and make an approach for access reviews or a dynamic group in advance.
Access reviews also show up in various other places in Azure AD, such as access packages. The methodology behind this is always the same and analogous to that described here.</p>

<p>Cover image Mohamed Hassan from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2021-01-19-ZeroTrust-AR/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2021-01-19-ZeroTrust-AR/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2021-01-19-ZeroTrust-AR/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[Automatic membership reminder]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2021-01-19-ZeroTrust_AR_cover.jpg" /><media:content medium="image" url="http://localhost:4000/MyPics/2021-01-19-ZeroTrust_AR_cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Zero Trust in Azure Identity - Part 3: Conditional Access</title><link href="http://localhost:4000/2021-01-18-ZeroTrust-CA/" rel="alternate" type="text/html" title="Zero Trust in Azure Identity - Part 3: Conditional Access" /><published>2021-01-18T20:01:57+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/ZeroTrust%20CA</id><content type="html" xml:base="http://localhost:4000/2021-01-18-ZeroTrust-CA/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#conditional-access-example" id="markdown-toc-conditional-access-example">Conditional access example</a></li>
  <li><a href="#policy-parameters" id="markdown-toc-policy-parameters">Policy parameters</a></li>
  <li><a href="#test-before-deploy" id="markdown-toc-test-before-deploy">Test before deploy</a></li>
</ul>

<p>Conditional Access policies are a perfect functionality for best adapting logon and access to specific applications to the diverse circumstances of users. They are suitable for aggregating signals, making decisions based on them, and enforcing organizational policies. The user context is crucial for this and after evaluating the policy, access is allowed, blocked or certain criteria must be met in order for the user to reach their destination.</p>

<p>Unlike what you may be used to in other policies, the design of CA policies is very complex and the administrator determines the level of complexity. It starts with a string of if statements that evaluate signals mentioned earlier. These can be simple group memberships of the user up to the combination of device platforms(iOS, Windows) or a location from which the user started his access attempt.
In the editor, the target for the policy is defined in the ‚ÄúAssignments‚Äù section. In the ‚ÄúAccess controls‚Äù section, it is possible to describe what should happen in a positive or negative sense. It is also possible to evaluate signals from other areas of the Azure platform here, for example, the logon risk from Identity Protection can be included in the conditions. If the user‚Äôs access represents a medium or high logon risk, access to sensitive applications may no longer be permitted or only by using MFA.</p>

<h2 id="conditional-access-example">Conditional access example</h2>

<p>Let‚Äôs look at an example to illustrate the power of the policy. Let‚Äôs say you want to allow access to Azure Portal for administrators only when they are accessing from the corporate location and when the machine being used is a hybrid device mounted in Azure AD.
Navigate to the conditional access policies section. You can find the CA policies in the Azure Active directory dashboard and there in the ‚ÄúManage‚Äù and ‚ÄúSecurity‚Äù section.
If you want to make it quick, you can also search for ‚ÄúConditional Access‚Äù in the resources search box at the top of the Azure portal and you‚Äôll get right to it. You may well have Baseline Policies in your policy list, which are a legacy feature from the early days of policies. Make sure that these are not activated, they will be removed from the portal ‚Äúsoon‚Äù.
Below that, all defined policies are displayed, with an indication if they are active. Here it becomes quickly apparent that especially with the configuration variety an overview of the contents of the policies is desirable. Who wants to open each policy to see what its purpose is. For this purpose, a well thought-out naming concept is helpful, with which you can recognize the purpose in the list on the basis of the names. Microsoft has some design recommendations ready, among other things how the name concept can look like, so that you can keep the overview (https://docs.microsoft.com/de-de/azure/active-directory/conditional-access/plan-conditional-access).
Since we are referring to familiar sites with our policy, they must exist. Named locations can be edited in the editor in the administration area on the left. No matter if locations are used within the guidelines, it is recommended to store due subnets of the known location. This way you always have everything ready for all cases.</p>

<h2 id="policy-parameters">Policy parameters</h2>

<p>In our example the policy is named: ‚Äú<strong>CA03-AzurePortal: Block for all Security Roles when Admin not On-Prem AND hybrid Client</strong>‚Äù.
Which actually says everything without the administrator having to look at the policy. Creating the policy is self-explanatory in the editor. In the assignments we leave users and groups blank and select all the roles we want for the scenario, ‚ÄúGlobal Administrator‚Äù, ‚ÄúSecurity Administrator‚Äù, etc. At this point it is especially important that in the ‚ÄúExclude‚Äù tab of the users and groups we leave the Break Glass accounts mentioned above, as these must be excluded. Next, we go to ‚ÄúCloud apps ‚Ä¶‚Äù and select Azure Portal from the list of registered apps. For the conditions, we focus on the sites and here it is important to select ‚ÄúAll sites‚Äù under ‚ÄúInclude‚Äù and for ‚ÄúExclude‚Äù we select ‚ÄúAll trusted sites‚Äù. Since our policy denies access, we exclude trusted location from the policy. The policy can be further refined and in the conditions these can be extended with the criterion device status and ‚Äúhybrid device‚Äù.</p>

<figure>
  <img src="/MyPics/2021-01-18-ZeroTrust CA_I.png" style="width:100%" />
  <figcaption>Example of a location based Conditional Access Policy</figcaption>
</figure>

<h2 id="test-before-deploy">Test before deploy</h2>

<p>Not every administrator has a test environment ready to test the impact of the policies. Or often the labs are not as close to production to develop the policies there. Since working on policies is open-heart surgery in production, there are some tools to help with the startup. For example, when activating the policy, the ‚ÄúReport Only‚Äù option is useful. This means that the policy does nothing more than write an entry in the login log. So the policy is armed in production, but does not do anything except the log entry.</p>

<figure>
  <img src="/MyPics/2021-01-18-ZeroTrust CA_III.png" style="width:100%" />
  <figcaption>Sign-in logs help investigate what happened regarding CA</figcaption>
</figure>

<p>Furthermore the function ‚ÄúWhat If‚Äù should be pointed out. Here you have the possibility to simulate a login or an access. In a list the applied policies and their result are shown.</p>

<figure>
  <img src="/MyPics/2021-01-18-ZeroTrust CA_II.png" style="width:100%" />
  <figcaption>Sign-in logs help investigate what happened regarding CA</figcaption>
</figure>

<p>These tools help to avoid that the administrator locks out. If this should happen nevertheless times, there is the possibility to log in with a Break Glass account, provided it is deposited with the guidelines in the ‚ÄúExcludes‚Äù.</p>

<figure>
  <img src="/MyPics/2021-01-18-ZeroTrust CA_IV.png" style="width:70%" />
  <figcaption>Exclude BGAs from CAs. A "must" in CA deployment</figcaption>
</figure>

<p>Cover image by Gerd Altmann from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2021-01-18-ZeroTrust-CA/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2021-01-18-ZeroTrust-CA/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2021-01-18-ZeroTrust-CA/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[CA - the center of Zero Trust with Identity]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2021-01-18-ZeroTrust%20CA_cover.jpg" /><media:content medium="image" url="http://localhost:4000/MyPics/2021-01-18-ZeroTrust%20CA_cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Zero Trust in Azure Identity - Part 2: MFA! Is there a right way?</title><link href="http://localhost:4000/2021-01-16-ZeroTrust-MFA/" rel="alternate" type="text/html" title="Zero Trust in Azure Identity - Part 2: MFA! Is there a right way?" /><published>2021-01-16T15:59:57+01:00</published><updated>2024-08-22T12:54:25+02:00</updated><id>http://localhost:4000/ZeroTrust%20MFA</id><content type="html" xml:base="http://localhost:4000/2021-01-16-ZeroTrust-MFA/"><![CDATA[<ul id="markdown-toc">
  <li><a href="#is-there-a-right-way-to-implement-mfa" id="markdown-toc-is-there-a-right-way-to-implement-mfa">Is there a right way to implement MFA</a></li>
  <li><a href="#good-planning-is-important" id="markdown-toc-good-planning-is-important">Good planning is important</a></li>
  <li><a href="#exploit-the-possibilities" id="markdown-toc-exploit-the-possibilities">Exploit the possibilities</a></li>
</ul>

<h2 id="is-there-a-right-way-to-implement-mfa">Is there a right way to implement MFA</h2>

<p>MFA has become more prevalent with many providers on the Internet. This definitely also includes the Microsoft world and the logon to Azure AD or Microsoft 365. The distribution of MFA, or switching on when which user has to log on with a second factor in Azure AD, is linked to powerful policies. The topic as a whole has a multi-layered structure, and this is especially true for licensing, i.e. costs, in addition to the options for deployment. Here, unfortunately, as with other Azure features, the cost and capabilities depend on which Azure AD plan they are using. For example, the ability to use SMS as a second factor is not available in all editions. A good overview of all tariffs with the corresponding functionalities can be found in the following Microsoft Docs <a href="https://docs.microsoft.com/de-de/azure/active-directory/authentication/concept-mfa-licensing" target="_blank">article</a>. At this point we are looking at the technology, primarily the provision of MFA.</p>

<h2 id="good-planning-is-important">Good planning is important</h2>

<p>The easiest way to get MFA to users is to do it statically. This no ‚Äúifs‚Äù and ‚Äúbuts‚Äù method can be found somewhat hidden in the Azure AD Portal, in the display of all users in the command bar at the top. This method also requires you to specify a CSV file as the source with the contents of the desired user accounts. You should think twice about this but rather antiquated method. In today‚Äôs dynamic times, a rather smart method of distributing MFA is required, preferably if this can be tied to conditions. And there you have several options at hand. The most common, and the one recommended by Microsoft, is to enable it via ‚ÄúConditional Access Policies‚Äù. They offer more options than controlling the distribution of MFA. CA is only one part of it, but more on that later.</p>

<h2 id="exploit-the-possibilities">Exploit the possibilities</h2>

<p>If you have Identity Protection in place, you can define MFA as part of the logon risk policy. If a user logon risk is detected, you can react in several ways, one of them is to allow logon using MFA.
A typical lab case is, for example, a logon using the TOR browser, which hides the actual IP address, or when a logon is made from two different geographical locations, which is also atypical in normal cases. However, it is always possible that this is legitimate, for example when a developer is testing something, so the logon can be granted via MFA. Identity Protection can also be used to roll out MFA to all users by enabling the MFA registration policy in the Identity Protection Dashboard. Unlike the manual approach mentioned above, here it is possible to specify AD groups, which allows us to make the activation selective for specific users.</p>

<p>Cover image by Gerd Altmann from Pixabay</p>

<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css" />

<div class="share-box">
<h5>Share this:</h5>

<!--<a class="t" href="https://twitter.com/intent/tweet?text=&url=http://localhost:4000/2021-01-16-ZeroTrust-MFA/" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-twitter fa"></i><span> twitter</span></a>
-->

<a class="l" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=http://localhost:4000/2021-01-16-ZeroTrust-MFA/&amp;title=&amp;summary=&amp;source=webjeda" onclick="window.open(this.href, 'mywin',
'left=20,top=20,width=500,height=500,toolbar=1,resizable=0'); return false;"><i class="fa fa-linkedin fa"></i><span> linkedin</span></a>

<a class="e" href="mailto:?subject=&amp;body=Check out this site http://localhost:4000/2021-01-16-ZeroTrust-MFA/"><i class="fa fa-envelope fa"></i><span> email</span></a>                          
</div>]]></content><author><name></name></author><summary type="html"><![CDATA[MFA - 2 min considerations and further reading]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/MyPics/2021-01-18-ZeroTrust_MFA_cover.jpg" /><media:content medium="image" url="http://localhost:4000/MyPics/2021-01-18-ZeroTrust_MFA_cover.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>